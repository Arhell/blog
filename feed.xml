<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://blog.kubeflow.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.kubeflow.org/" rel="alternate" type="text/html" /><updated>2021-04-02T17:26:33-05:00</updated><id>https://blog.kubeflow.org/feed.xml</id><title type="html">Kubeflow</title><subtitle>The Machine Learning Toolkit for Kubernetes.</subtitle><entry><title type="html">Kubeflow Continues to Move into Production</title><link href="https://blog.kubeflow.org/kubeflow-continues-to-move-to-production" rel="alternate" type="text/html" title="Kubeflow Continues to Move into Production" /><published>2021-03-19T00:00:00-05:00</published><updated>2021-03-19T00:00:00-05:00</updated><id>https://blog.kubeflow.org/kubeflow-continues-to-move-to-production</id><content type="html" xml:base="https://blog.kubeflow.org/kubeflow-continues-to-move-to-production">&lt;p&gt;Kubeflow Users are maturing and the community is growing, forty eight percent of users are supporting deployments in production.&lt;/p&gt;

&lt;p&gt;The Spring 2021 &lt;a href=&quot;http://kubeflow.org/&quot;&gt;Kubeflow&lt;/a&gt; Community User Survey collected input from Kubeflow users on the benefits, gaps and requirements for machine learning use cases. It is the largest survey to date with 179 responses—a 50% increase from the &lt;a href=&quot;https://medium.com/kubeflow/kubeflow-community-user-survey-fall-2019-a84776c71743&quot;&gt;Kubeflow 1.0 Community User Survey&lt;/a&gt; a year ago. The Survey respondents span a spectrum of skill sets. While 42% are machine learning (ML) engineers, and 24% are ML architects, the titles of the respondents vary from DevOps Engineers to data scientists and product managers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2021-03-11-survey/image1.png&quot; alt=&quot;alt_text&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;kubeflow-continues-to-move-into-production&quot;&gt;Kubeflow Continues to Move Into Production&lt;/h1&gt;

&lt;p&gt;Forty eight percent of users are supporting deployments that are in production, up from 15% last year. Further, one question that many folks have is “do people upgrade a production deployment or just install a new cluster and start over?” It appears that the latter is far more common: just 8% have upgraded their environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2021-03-11-survey/image2.png&quot; alt=&quot;alt_text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similar to previous years, Kubeflow Pipelines and Notebooks are the most popular components, but other components are now being widely deployed as well. Interest in TensorBoard has grown, joining KFServing, Katib (AutoML), and Distributed Training as top additional services.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2021-03-11-survey/image3.png&quot; alt=&quot;alt_text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although the usage patterns for Kubeflow components are mixed, the vast majority of users need at least two Kubeflow components in their ML Platform.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2021-03-11-survey/image4.png&quot; alt=&quot;alt_text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TensorFlow is the leading ML Framework, followed by Scikit-learn, PyTorch, Keras, and XGBoost. However, with Kubeflow’s built-in extensibility, the type of ML tools people use in Kubeflow go beyond just training frameworks, and include MLFlow, Airflow, and Spark.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2021-03-11-survey/image5.png&quot; alt=&quot;alt_text&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;vs-code-and-jupyter-lead-dev-environments&quot;&gt;VS Code and Jupyter Lead Dev Environments&lt;/h1&gt;

&lt;p&gt;From an Integrated Development Environment (IDE) perspective, most users are developing models in Jupyter Notebooks and Visual Studio Code, and about one third are using PyCharm.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2021-03-11-survey/image6.png&quot; alt=&quot;alt_text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From a gap perspective, the users would like improved documentation, tutorials, and installation, along with more automation, support and security.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2021-03-11-survey/image7.png&quot; alt=&quot;alt_text&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;using-kubeflow-goes-beyond-just-training&quot;&gt;Using Kubeflow Goes Beyond Just Training&lt;/h1&gt;

&lt;p&gt;Users identified that data preprocessing and transformation are both the most time consuming and challenging steps. We also received feedback that pipeline building and feature engineering are both time consuming and challenging. Distributed training, model serving and monitoring appear to be more technically challenging than time consuming.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2021-03-11-survey/image8.png&quot; alt=&quot;alt_text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ML model delivery commonly requires multiple teams to work together i.e. data engineers, data scientists, ML engineers and devops engineers. ML workflows often include manual processes and there can be gaps in the handoffs between these groups. In particular, connecting data pipelines to ML pipelines is an example of a process that could be better automated, along with pipeline building and model monitoring.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2021-03-11-survey/image9.png&quot; alt=&quot;alt_text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The vast majority of Kubeflow users are self-reliant in solving complex problems:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2021-03-11-survey/image10.png&quot; alt=&quot;alt_text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And many are using tutorials created by Cloud Service Providers (i.e. Google, AWS and Azure) and MiniKF from Arrikto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2021-03-11-survey/image11.png&quot; alt=&quot;alt_text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The majority of ML models have a fairly short life: ~50% run in production for 3 months or less. On the other end of the spectrum, 25% of the models remain in production for 6 months or longer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2021-03-11-survey/image12.png&quot; alt=&quot;alt_text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And ~70% of all models take up to 15 iterations to produce  a final model suitable for production.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2021-03-11-survey/image13.png&quot; alt=&quot;alt_text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Users have a wide range of success with their models: ~43% are getting more than half of their models to deliver business value. On the other side, 39% are getting a very small percentage (10%) of their models into production and delivering business value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2021-03-11-survey/image14.png&quot; alt=&quot;alt_text&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;user-requests&quot;&gt;User Requests&lt;/h1&gt;

&lt;p&gt;We provided a section for free-form responses and we received a great deal of feedback. Here are some good examples of user requests:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Metadata storage and versioning&lt;/li&gt;
  &lt;li&gt;More robust access control and permission granularity for model/data sharing&lt;/li&gt;
  &lt;li&gt;More visibility on your roadmap&lt;/li&gt;
  &lt;li&gt;Installation patterns, stability, multi tenancy&lt;/li&gt;
  &lt;li&gt;More real life case studies&lt;/li&gt;
  &lt;li&gt;Updated and more in-depth documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;key-takeaways&quot;&gt;Key Takeaways&lt;/h1&gt;

&lt;p&gt;In addition to learning about how users are operating Kubeflow in production clusters, the Community Survey has given us important data that we can use to enhance our processes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improvements to the release management process, which is being driven by better inter-Working Group collaboration. This, coupled with core upgrades to Istio and a clean-up of the installation manifests, will improve the testing, documentation, and installation patterns.&lt;/li&gt;
  &lt;li&gt;Automation of pipeline building and feature engineering tasks, especially with continued integrations of Kubeflow with Kale and Feast, which are enabling new end-to-end workflows and tutorials.&lt;/li&gt;
  &lt;li&gt;Enhancements for data preprocessing and transformation as well as streamlined connections of Data Pipelines to ML Pipelines.  Additionally, a renewed effort to develop a Spark operator.&lt;/li&gt;
  &lt;li&gt;Several new UIs are under development i.e. Katib, Model Management, Volumes Management and TensorBoard Management, which will help the user experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on the Community’s and specific Working Group’s deliveries, please review the Kubeflow 1.3 Release Blog post.&lt;/p&gt;

&lt;h1 id=&quot;join-the-community&quot;&gt;Join the Community&lt;/h1&gt;

&lt;p&gt;We would like to thank everyone for their participation in the survey. As you can see from the survey results, the Kubeflow Community is vibrant and diverse, solving real world problems for organizations around the world.&lt;/p&gt;

&lt;p&gt;Want to help? The Kubeflow Community &lt;a href=&quot;https://github.com/kubeflow/community/blob/master/wg-list.md&quot;&gt;Working Groups&lt;/a&gt; hold open meetings, public lists, and are always looking for more volunteers and users to unlock the potential of machine learning. If you’re interested in becoming a Kubeflow contributor, please feel free to check out the resources below. We look forward to working with you!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Visit our&lt;a href=&quot;https://www.kubeflow.org/&quot;&gt; Kubeflow website&lt;/a&gt; or&lt;a href=&quot;https://github.com/kubeflow&quot;&gt; Kubeflow GitHub Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Join the&lt;a href=&quot;https://join.slack.com/t/kubeflow/shared_invite/enQtMjgyMzMxNDgyMTQ5LWUwMTIxNmZlZTk2NGU0MmFiNDE4YWJiMzFiOGNkZGZjZmRlNTExNmUwMmQ2NzMwYzk5YzQxOWQyODBlZGY2OTg&quot;&gt; Kubeflow Slack channel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Join the&lt;a href=&quot;https://groups.google.com/forum/#!forum/kubeflow-discuss&quot;&gt; kubeflow-discuss&lt;/a&gt; mailing list&lt;/li&gt;
  &lt;li&gt;Attend a&lt;a href=&quot;https://www.kubeflow.org/docs/about/community/&quot;&gt; weekly community meeting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Josh Bottum, David Aronchick, Thea Lamkin</name></author><category term="release" /><summary type="html">Kubeflow Users are maturing and the community is growing, forty eight percent of users are supporting deployments in production.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.kubeflow.org/images/logo.png" /><media:content medium="image" url="https://blog.kubeflow.org/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Elastic Training with MPI Operator and Practice</title><link href="https://blog.kubeflow.org/elastic%20training/operators/2021/03/15/elastic-training.html" rel="alternate" type="text/html" title="Elastic Training with MPI Operator and Practice" /><published>2021-03-15T00:00:00-05:00</published><updated>2021-03-15T00:00:00-05:00</updated><id>https://blog.kubeflow.org/elastic%20training/operators/2021/03/15/elastic-training</id><content type="html" xml:base="https://blog.kubeflow.org/elastic%20training/operators/2021/03/15/elastic-training.html">&lt;p&gt;With increase in the size of dataset and deep learning models, distributed training emerges as the mainstream approach for training neural network models in industry. While it is feasible now to launch a massive distributed training job on Kubernetes with Kubeflow, advanced features like elastic workload and other cost mitigation approaches remain leashed when we talk about deep learning jobs on Kubernetes.&lt;/p&gt;

&lt;p&gt;To address issues on cost and resource utilization, the &lt;a href=&quot;https://intl.cloud.tencent.com/product/tke&quot;&gt;TKE (Tencent Kubernetes Engine)&lt;/a&gt; AI team designs and implements &lt;strong&gt;Elastic Training&lt;/strong&gt; in Kubeflow community.&lt;/p&gt;

&lt;p&gt;Here we present how the elastic training is performed on Kubernetes. Validated with experiments under circumstances, elastic training lowers cost for distributed training on cloud.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;Let’s first recap training deep learning models. When we talk about ‘training’, it refers generally to iteratively optimizing parameters in a neural network model with its gradient descent. Accelerated with GPUs, the training can speed up for 10-100 times.&lt;/p&gt;

&lt;p&gt;When manufacturers try to integrate more computational resources like GPUs into a single machine, to hold training experiments with more and more data or model parameters, the cost grows exponentially. Therefore, after initially proposed by &lt;a href=&quot;https://www.usenix.org/conference/osdi14/technical-sessions/presentation/li_mu&quot;&gt;Mu Li on OSDI’14&lt;/a&gt;, distributed training takes over training on a single machine when researchers play with massive dataset or large model.&lt;/p&gt;

&lt;p&gt;For distributed training in data-parallelism, &lt;a href=&quot;https://github.com/horovod/horovod&quot;&gt;Horovod&lt;/a&gt; is widely adopted given its excellent support on deep learning frameworks like &lt;a href=&quot;https://www.tensorflow.org&quot;&gt;TensorFlow&lt;/a&gt; and &lt;a href=&quot;https://pytorch.org&quot;&gt;PyTorch&lt;/a&gt;, communication optimization and easier programming pattern. In Horovod, all training processes are equal participants, each of which process the gradient calculation and communication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-03-15-elastic-training/horovod-allreduce.png&quot; width=&quot;&quot; alt=&quot;alt_text&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because of significant acceleration of training speed as well as the programming pattern that are easier to understand, data-parallelism distributed training, represented by Horovod, is getting more and more attention. However, there still remain some issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The cost of training on the cloud is still the hurdle. While researchers no longer face the complexity when training on cloud thanks to Kubernetes and Kubeflow, the cost of training on cloud quells some users.&lt;/li&gt;
  &lt;li&gt;Compared with training on a single machine, multi-node distributed training accumulates the probability of training failure. The entire training experiment fails when any of its training process issues an error. This problem becomes even severer when some experiments take days or even weeks.&lt;/li&gt;
  &lt;li&gt;When collocating training tasks with other workloads (with higher priority), the resources demand fluctuates as the request for these other workloads may change periodically. This unbalance of resources availability throws cold water on the idea of using hybrid-deployment to maximize resource utilization.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;elastic-training&quot;&gt;Elastic Training&lt;/h2&gt;

&lt;p&gt;Researchers and engineers proposed &lt;strong&gt;Elastic Training&lt;/strong&gt; as the key to solve the puzzle.&lt;/p&gt;

&lt;p&gt;Traditionally, the resource configuration for a distributed training job is fixed. Elastic training breaks this rule and enables users to change the number of instances participating in a distributed training job, bringing the following benefits to clusters with distributed training jobs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fault Tolerance: any worker instance can fail as long as at least one is surviving.&lt;/li&gt;
  &lt;li&gt;Resources Utilization: when the resources stress piles, the cluster is able to reduce the replicas of workloads with lower priority (distributed training workloads), releasing resource to other workloads (such as prediction service), ensuring SLA for business; after resources released from workloads, elastic training job is able to absorb these resource by scaling up workload replicas.&lt;/li&gt;
  &lt;li&gt;Training on Cloud: there is a type of resource on the cloud that is called “spot” or “preemptible” instances; it comes with unexpected low price tags but may be retrieved after guaranteed hour expires.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Elastic training appears a perfect match to public cloud. Combined with spot instances, we cut the cost for GPUs from ¥16.21/hour to ¥1.62/hour, reducing the overall cost for the training job by nearly 70%. Under the same budget, elastic training employs more GPUs and accelerates the training speed by 5 to 10 times.&lt;/p&gt;

&lt;h2 id=&quot;elastic-horovod&quot;&gt;Elastic Horovod&lt;/h2&gt;

&lt;p&gt;As the major player in distributed training framework, Horovod v0.20.0 offers its solution to elastic training, &lt;a href=&quot;https://horovod.readthedocs.io/en/stable/elastic_include.html&quot;&gt;Elastic Horovod&lt;/a&gt;. Here we quotes the architecture differences between Elastic Horovod and existing Horovod from &lt;a href=&quot;https://docs.google.com/document/d/15ZoHA5AeSI_boeyIBapg9WPXKrYXMRvPytPzQWTCTn4/edit#&quot;&gt;RFC Elastic Horovod&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-03-15-elastic-training/horovod-elastic.png&quot; width=&quot;&quot; alt=&quot;alt_text&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All collective operations are coordinated within a hvd.elastic.run function.&lt;/li&gt;
  &lt;li&gt;State is synchronized between workers before the user’s training function is executed.&lt;/li&gt;
  &lt;li&gt;Worker failure or worker added events will result in a reset event on other workers.&lt;/li&gt;
  &lt;li&gt;Reset events act as barriers to:
    &lt;ul&gt;
      &lt;li&gt;Determine whether the job should continue based on worker exit codes.&lt;/li&gt;
      &lt;li&gt;Blacklist failing hosts.&lt;/li&gt;
      &lt;li&gt;Launch workers on new hosts.&lt;/li&gt;
      &lt;li&gt;Update the rank information on existing workers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;State is synchronized following a reset event.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When launching an elastic training job, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;horovodrun&lt;/code&gt; requires a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover_hosts.sh&lt;/code&gt; script to detect available hosts and slots in real time. In the following section, we refer this script as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover_hosts.sh&lt;/code&gt;. Nevertheless the script needs not to be named as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover_hosts.sh&lt;/code&gt;. An example of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover_hosts.sh&lt;/code&gt; can be found &lt;a href=&quot;https://horovod.readthedocs.io/en/stable/elastic_include.html#running-with-horovodrun&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;elastic-horovod-on-kubernetes&quot;&gt;Elastic Horovod on Kubernetes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kubeflow/mpi-operator&quot;&gt;MPI-Operator&lt;/a&gt; is designed to deploy Horovod jobs on Kubernetes. While the operator releases multiple versions, the general idea stays unchanged. It includes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-03-15-elastic-training/mpi-operator.png&quot; width=&quot;&quot; alt=&quot;alt_text&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MPIJob Controller creates a launcher pod and worker pods according to the replicas configuration in MPIJobs&lt;/li&gt;
  &lt;li&gt;For each MPIJob, the controller creates a &lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/configmap/&quot;&gt;ConfigMap&lt;/a&gt;, which delivers two files: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hostfile&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubexec.sh&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;With all worker pods ready, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mpirun&lt;/code&gt; on launcher pod (granted with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod/exec&lt;/code&gt; permission) uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubexec.sh&lt;/code&gt; to launch processes on worker pods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Launching an Elastic Horovod job is not feasible as there exist several incompatibilities between Elastic Horovod and MPIJob Controller. We take controller-v1 as the example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No built-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover_hosts.sh&lt;/code&gt; available on launcher pod&lt;/li&gt;
  &lt;li&gt;After worker replica number is turned down, worker pods that are no longer wanted will not be deleted by the controller, leaving the size of the distributed training unchanged&lt;/li&gt;
  &lt;li&gt;After worker replica number is turned up, the controller does not update rule in the &lt;a href=&quot;https://kubernetes.io/docs/reference/access-authn-authz/rbac/&quot;&gt;Role&lt;/a&gt; binded to the launcher pod, preventing the launcher pod from creating processes on newly created pods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To address these compatibility issues, we pushed multiple pull requests regarding Horovod and MPI-Operator, including &lt;a href=&quot;https://github.com/kubeflow/mpi-operator/pull/335&quot;&gt;mpi-operator-pull-335&lt;/a&gt; and &lt;a href=&quot;https://github.com/horovod/horovod/pull/2199&quot;&gt;horovod-pull-2199&lt;/a&gt;. As providing an MPI-Operator-specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover_hosts.sh&lt;/code&gt; is most critical to the launcher pod for Elastic Horovod, we consider two scenarios for converting worker pods with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Running&lt;/code&gt; phase into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover_hosts.sh&lt;/code&gt; script.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;dynamic&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover_hosts.sh&lt;/code&gt; composed by MPIJob controller and synchronized to the launcher pod via ConfigMap
    &lt;ul&gt;
      &lt;li&gt;MPIJob controller has a podLister, which can be used to list worker pods readily&lt;/li&gt;
      &lt;li&gt;the controller filters worker pods with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status.phase == Running&lt;/code&gt; and encode the result into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover_hosts.sh&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;the ConfigMap is updated when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover_hosts.sh&lt;/code&gt; is modified and the change will be propagated to the launcher pod by Kubernetes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;static&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover_hosts.sh&lt;/code&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; in the launcher pod to list all running worker pods from &lt;a href=&quot;https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/&quot;&gt;APIServer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scenario 2 changes the delivery image instead of the controller. However, as we cannot limit how frequently users will execute the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover_hosts.sh&lt;/code&gt; script, it poses a potential threat to the APIServer, especially when the count of worker pods is massive.&lt;/p&gt;

&lt;p&gt;An fixture to scenario 2 is to replace the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; with a podLister process, removing extra stress from the APIServer. In this way, we install two processes in launcher pod but lack a proper mechanism to keep the podLister alive. Once the podLister dies, there leaves no elasticity for the training job.&lt;/p&gt;

&lt;p&gt;Therefore we choose the first scenario and map the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disocver_hosts.sh&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/mpi/&lt;/code&gt;. We also fixed the other compatibility issues after the worker replica configuration changes. For users choose non-elastic mode, just simply ignore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/mpi/discover_hosts.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Concerns comes to scenario 1 as well. There is a delay between the ConfigMap and what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;horovodrun&lt;/code&gt; sees from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover_hosts.sh&lt;/code&gt; in the launcher pod. This delay, on one hand, can be tweaked by cluster admin and on the other hand, can be considered as tiny compared to the training elapsed time or the time for Elastic Horovod to handle worker changes.&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;

&lt;p&gt;We present a demo to show how to operate an Elastic Horovod job with MPI Operator.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-5.0&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ./tensorflow-mnist-elastic.yaml
mpijob.kubeflow.org/tensorflow-mnist-elastic 
createdbash-5.0&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get po
NAME    READY   STATUS    RESTARTS  AGE
tensorflow-mnist-elastic-launcher   1/1     Running   0          14s
tensorflow-mnist-elastic-worker-0   1/1     Running   0          14s
tensorflow-mnist-elastic-worker-1   1/1     Running   0          14s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The job is created with two workers. After the training begins, we change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MPIJob.Spec.MPIReplicaSpecs[&quot;Worker&quot;].Replicas&lt;/code&gt; to &lt;strong&gt;3&lt;/strong&gt;, adding another worker. Let’s check how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover_hosts.sh&lt;/code&gt; changes:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-5.0&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;tensorflow-mnist-elastic-launcher &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; /etc/mpi/discover_hosts.sh
tensorflow-mnist-elastic-worker-0:1
tensorflow-mnist-elastic-worker-1:1
bash-5.0&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ./patch_r3.yaml
spec:
  mpiReplicaSpecs:
    &lt;span class=&quot;s2&quot;&gt;&quot;Worker&quot;&lt;/span&gt;:
      replicas: 3
bash-5.0&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl patch mpijob tensorflow-mnist-elastic &lt;span class=&quot;nt&quot;&gt;--patch&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;patch_r3.yaml&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;merge
mpijob.kubeflow.org/tensorflow-mnist-elastic patched
bash-5.0&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;tensorflow-mnist-elastic-launcher &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; /etc/mpi/discover_hosts.sh
tensorflow-mnist-elastic-worker-0:1
tensorflow-mnist-elastic-worker-1:1
tensorflow-mnist-elastic-worker-2:1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We reduce the replica count to 1, retrieving 2 worker instances.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-5.0&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ./patch_r1.yaml
spec:
  mpiReplicaSpecs:
    &lt;span class=&quot;s2&quot;&gt;&quot;Worker&quot;&lt;/span&gt;:
      replicas: 1
bash-5.0&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl patch mpijob tensorflow-mnist-elastic &lt;span class=&quot;nt&quot;&gt;--patch&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;patch_r1.yaml&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;merge
mpijob.kubeflow.org/tensorflow-mnist-elastic patched
bash-5.0&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get po
NAME               READY   STATUS        RESTARTS   AGE
tensorflow-mnist-elastic-launcher   1/1     Running       0          4m48s
tensorflow-mnist-elastic-worker-0   1/1     Running       0          4m48s
tensorflow-mnist-elastic-worker-1   1/1     Terminating   0          4m48s
tensorflow-mnist-elastic-worker-2   1/1     Terminating   0          2m21s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The elastic training persists.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Thu Mar 11 01:53:18 2021[1]&amp;lt;stdout&amp;gt;:Step &lt;span class=&quot;c&quot;&gt;#40    Loss: 0.284265&lt;/span&gt;
Thu Mar 11 01:53:18 2021[0]&amp;lt;stdout&amp;gt;:Step &lt;span class=&quot;c&quot;&gt;#40    Loss: 0.259497&lt;/span&gt;
Thu Mar 11 01:53:18 2021[2]&amp;lt;stdout&amp;gt;:Step &lt;span class=&quot;c&quot;&gt;#40    Loss: 0.229993&lt;/span&gt;
Thu Mar 11 01:54:27 2021[2]&amp;lt;stderr&amp;gt;:command terminated with &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;code 137
Process 2 &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;with status code 137.
Thu Mar 11 01:54:27 2021[0]&amp;lt;stderr&amp;gt;:command terminated with &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;code 137
Process 0 &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;with status code 137.
Thu Mar 11 01:54:57 2021[1]&amp;lt;stderr&amp;gt;:[2021-03-11 01:54:57.532928: E /tmp/pip-install-2jy0u7mn/horovod/horovod/common/operations.cc:525] Horovod background loop uncaught exception: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/tmp/pip-install-2jy0u7mn/horovod/third_party/compatible_gloo/gloo/transport/tcp/pair.cc:575] Connection closed by peer &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;10.244.2.27]:54432
WARNING:root:blacklist failing host: tensorflow-mnist-elastic-worker-2
WARNING:root:blacklist failing host: tensorflow-mnist-elastic-worker-1
Thu Mar 11 01:54:58 2021[1]&amp;lt;stdout&amp;gt;:Step &lt;span class=&quot;c&quot;&gt;#50    Loss: 0.207741&lt;/span&gt;
Thu Mar 11 01:55:00 2021[1]&amp;lt;stdout&amp;gt;:Step &lt;span class=&quot;c&quot;&gt;#60    Loss: 0.119361&lt;/span&gt;
Thu Mar 11 01:55:02 2021[1]&amp;lt;stdout&amp;gt;:Step &lt;span class=&quot;c&quot;&gt;#70    Loss: 0.131966&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, Elastic Horovod on MPI-Operator now supports tweaking worker replicas dynamically. As a future work, we aim to support  &lt;a href=&quot;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Horizontal Pod Autoscaler&lt;/code&gt;&lt;/a&gt; to MPIJob as well as other features like designated worker deletion.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When the concept of cloud native and distributed training fuse to elastic training on Kubernetes, it lowers the cost and gives robustness and flexibility. As a team, we are working with PyTorch, Horovod and other communities to propel elastic training. We wish to further introduce our work on elasticity with PS/Worker training mode, optimization for resource and job priority and other topics on cloud native AI.&lt;/p&gt;</content><author><name>&lt;a href='https://www.linkedin.com/in/gaocegege/'&gt;Ce Gao&lt;/a&gt;, &lt;a href='https://www.linkedin.com/in/wang-zhang'&gt;Wang Zhang&lt;/a&gt;</name></author><category term="elastic training" /><category term="operators" /><summary type="html">With increase in the size of dataset and deep learning models, distributed training emerges as the mainstream approach for training neural network models in industry. While it is feasible now to launch a massive distributed training job on Kubernetes with Kubeflow, advanced features like elastic workload and other cost mitigation approaches remain leashed when we talk about deep learning jobs on Kubernetes.</summary></entry><entry><title type="html">Kubeflow Katib: Scalable, Portable and Cloud Native System for AutoML</title><link href="https://blog.kubeflow.org/katib/" rel="alternate" type="text/html" title="Kubeflow Katib: Scalable, Portable and Cloud Native System for AutoML" /><published>2021-03-10T00:00:00-06:00</published><updated>2021-03-10T00:00:00-06:00</updated><id>https://blog.kubeflow.org/katib-0.10</id><content type="html" xml:base="https://blog.kubeflow.org/katib/">&lt;p&gt;As machine learning (ML) architectures are increasing in complexity, it is
becoming important to find the optimal hyperparameters and architecture for
ML models. &lt;a href=&quot;https://en.wikipedia.org/wiki/Automated_machine_learning&quot;&gt;Automated machine learning (AutoML)&lt;/a&gt;
has become a crucial step in the ML lifecycle.
Katib provides AutoML features in Kubeflow in a Kubernetes native way.&lt;/p&gt;

&lt;p&gt;Katib is an open source project which is agnostic to ML frameworks. It can tune
hyperparameters in applications written in any language of the user’s choice and
natively supports many ML frameworks, such as TensorFlow, Keras, PyTorch, MPI,
MXNet, XGBoost, scikit-learn, and others. Katib improves business results by
efficiently building more accurate models and lowering operational and
infrastructure costs. Katib can be deployed on local machines, or hosted as a
service in on-premise data centers, or in private/public clouds.&lt;/p&gt;

&lt;p&gt;Katib offers a rich set of features accessible via APIs. By using these APIs,
Katib is natively integrated to Kubeflow Notebooks and Pipelines. Katib supports
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hyperparameter_optimization&quot;&gt;Hyperparameter optimization (HP)&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Neural_architecture_search&quot;&gt;Neural Architecture Search (NAS)&lt;/a&gt;,
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Early_stopping&quot;&gt;Early Stopping&lt;/a&gt;. Early Stopping
feature can be used without any significant changes in the current Katib Experiments.&lt;/p&gt;

&lt;p&gt;Furthermore, Katib is a unique system which supports all
&lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/&quot;&gt;Kubernetes workloads&lt;/a&gt; and
Kubernetes &lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&quot;&gt;custom resource definition (CRD)&lt;/a&gt;
to perform Katib Experiments. Since Katib can execute various Kubernetes resources,
users are able to run not only ML models optimization Experiments. They can also
enhance any software, code or program to make it more efficient with optimization
algorithms provided by Katib.&lt;/p&gt;

&lt;p&gt;We are continually working on the new Katib UI to provide a better User
Experience and native integration with Kubeflow central dashboard.
Please check &lt;a href=&quot;https://youtu.be/OKqx3IS2_G4?list=PLmzRWLV1CK_ypvsQu10SGRmhf2S7mbYL5&quot;&gt;this presentation&lt;/a&gt;
to know more about the new UI.&lt;/p&gt;

&lt;p&gt;All of the above mentioned features allow users to easily integrate Katib in
their ML infrastructure pipeline.&lt;/p&gt;

&lt;h2 id=&quot;system-architecture&quot;&gt;System Architecture&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-03-10-katib-0.10/architecture.png&quot; width=&quot;&quot; alt=&quot;Architecture&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are 3 main concepts in Katib which are Kubernetes CRDs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Experiment&lt;/strong&gt; - a single optimization run with objective, search space, and
search algorithm.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Suggestion&lt;/strong&gt; - set of hyperparameters, which are produced by a user’s
selected search algorithm. Katib creates Trials to evaluate them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Trial&lt;/strong&gt; - one iteration of the hyperparameters tuning process. Trial runs
the worker job which corresponds to the training job. Since Trial is an
abstraction on top of the worker job, any Kubernetes resource can be used to
perform the training job. For example, &lt;a href=&quot;https://github.com/kubeflow/tf-operator&quot;&gt;&lt;strong&gt;TFJob&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://github.com/kubeflow/mpi-operator&quot;&gt;&lt;strong&gt;MPIJob&lt;/strong&gt;&lt;/a&gt; or even
&lt;a href=&quot;https://github.com/tektoncd/pipeline&quot;&gt;Tekton &lt;strong&gt;Pipeline&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By using above resources Katib follows the following steps, which are marked
in the diagram above:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Once an Experiment is submitted, the Experiment controller creates an
appropriate Suggestion object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Suggestion controller creates an AutoML algorithm service based on this
Suggestion object. When the algorithm service is ready, the Suggestion controller
calls the service to get new parameters and appends them to the Suggestion object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Experiment controller finds that Suggestion object has been updated and
creates a corresponding Trial object for each set of parameters.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Trial controller generates a worker job for each Trial object and watches
for the status of each job. The worker job based on the Trial template.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the worker job has been completed, the metrics collector gets the metrics
from the job and persists them in the database.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Experiment controller sends the metrics results to the algorithm service
and gets new parameters from the Suggestion object.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;custom-kubernetes-resources-support&quot;&gt;Custom Kubernetes resources support&lt;/h2&gt;

&lt;p&gt;Katib version 0.10 implements a new feature to support any Kubernetes
CRDs or Kubernetes workloads as a Katib Trial template. Therefore, there is no
need to manually modify the Katib controller to use CRD as a Trial. As long as
the CRD creates Kubernetes Pods, allows injecting the
&lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/&quot;&gt;sidecar container&lt;/a&gt;
on these Pods, and has success and failure status, the CRD can be used in Katib.&lt;/p&gt;

&lt;p&gt;Here are the motivations behind this feature:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Katib Trial template supports only a limited type of Kubernetes resource
(&lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/job/&quot;&gt;&lt;strong&gt;BatchJob&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://www.kubeflow.org/docs/components/training/tftraining/&quot;&gt;&lt;strong&gt;TFJob&lt;/strong&gt;&lt;/a&gt; and
&lt;a href=&quot;https://www.kubeflow.org/docs/components/training/pytorch/&quot;&gt;&lt;strong&gt;PyTorchJob&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Many Katib users might have their own CRDs which they want to use as a Trial template.
Thus, the approach of updating the Katib controller for the new CRD is not scalable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some CRDs might have Go packages versions which are incompatible with the Katib controller
packages. For such cases, it is impossible to build a Katib controller image.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Users have to build and maintain a custom image version for the Katib controller
if they want to implement a new CRD in Katib.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above problems led to the creation of a scalable and portable solution for the
Trial template. This solution allows users to modify Katib components and to add
their CRDs without changing the Katib controller image.&lt;/p&gt;

&lt;p&gt;Katib now supports Tekton &lt;strong&gt;Pipeline&lt;/strong&gt; and &lt;strong&gt;MPIJob&lt;/strong&gt; in addition to
&lt;strong&gt;BatchJob&lt;/strong&gt;, &lt;strong&gt;TFJob&lt;/strong&gt; and &lt;strong&gt;PyTorchJob&lt;/strong&gt;. In the case of Tekton &lt;strong&gt;Pipeline&lt;/strong&gt;,
a user is able to build a complex workflow inside the Trial’s worker job.
The user also can implement data preprocessing and postprocessing with all of
the Tekton &lt;strong&gt;Pipeline&lt;/strong&gt; features. Eventually, Katib’s metrics collector parses
and saves the appropriate metrics from the training processes to the database.&lt;/p&gt;

&lt;h3 id=&quot;support-new-kubernetes-crd-in-katib&quot;&gt;Support new Kubernetes CRD in Katib&lt;/h3&gt;

&lt;p&gt;To support new Kubernetes CRD, Katib components need to be modified before installing in
the Kubernetes cluster. To make this modification, it is necessary to know:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;what API group, version, and kind the Kubernetes CRD has, and&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;which Kubernetes resources the CRD’s controller creates.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check the
&lt;a href=&quot;https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/&quot;&gt;Kubernetes guide&lt;/a&gt;
to know more about CRDs.&lt;/p&gt;

&lt;p&gt;Follow these two simple steps to integrate new CRD in Katib:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Modify
the Katib controller &lt;a href=&quot;https://github.com/kubeflow/katib/blob/master/manifests/v1beta1/components/controller/controller.yaml#L26&quot;&gt;Deployment’s arguments&lt;/a&gt;
with the new flag:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--trial-resources=&amp;lt;object-kind&amp;gt;.&amp;lt;object-API-version&amp;gt;.&amp;lt;object-API-group&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;For example, to support Tekton &lt;strong&gt;Pipeline&lt;/strong&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;. . .&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;katib-controller&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker.io/kubeflowkatib/katib-controller&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./katib-controller&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--webhook-port=8443&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--trial-resources=Job.v1.batch&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--trial-resources=TFJob.v1.kubeflow.org&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--trial-resources=PyTorchJob.v1.kubeflow.org&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--trial-resources=MPIJob.v1.kubeflow.org&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--trial-resources=PipelineRun.v1beta1.tekton.dev&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;. . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Modify the Katib controller
&lt;a href=&quot;https://github.com/kubeflow/katib/blob/master/manifests/v1beta1/components/controller/rbac.yaml#L5&quot;&gt;ClusterRole’s rules&lt;/a&gt;
with the new rule to give Katib an access to all Kubernetes resources that
are created by the CRD’s controller. To know more about ClusterRole,
please check the &lt;a href=&quot;https://kubernetes.io/docs/reference/access-authn-authz/rbac/#role-and-clusterrole&quot;&gt;Kubernetes guide&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;For example, for the Tekton &lt;strong&gt;Pipeline&lt;/strong&gt;, Trial creates Tekton &lt;strong&gt;PipelineRun&lt;/strong&gt;,
then Tekton &lt;strong&gt;PipelineRun&lt;/strong&gt; creates Tekton &lt;strong&gt;TaskRun&lt;/strong&gt;.
Therefore, Katib controller ClusterRole should have an access to the &lt;em&gt;pipelineruns&lt;/em&gt; and &lt;em&gt;taskruns&lt;/em&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRole&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;katib-controller&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apiGroups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tekton.dev&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pipelineruns&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;taskruns&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;verbs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apiGroups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubeflow.org&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tfjobs&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pytorchjobs&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mpijobs&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;verbs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;. . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install Katib by following
&lt;a href=&quot;https://www.kubeflow.org/docs/components/katib/hyperparameter/#installing-katib&quot;&gt;the getting started guide&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, the Kubernetes CRD can be used in the Katib Trial template. Check
&lt;a href=&quot;https://github.com/kubeflow/katib/tree/master/examples/v1beta1/tekton&quot;&gt;this guide&lt;/a&gt;
to know more about Tekton and Katib integration.&lt;/p&gt;

&lt;h2 id=&quot;early-stopping&quot;&gt;Early Stopping&lt;/h2&gt;

&lt;p&gt;Early Stopping is now supported in the Katib 0.10 release. Early Stopping is one
of the essential steps for doing HP tuning. It helps to avoid overfitting when
the model is training during Katib Experiments.&lt;/p&gt;

&lt;p&gt;Using Early Stopping helps to save compute resources and to reduce the
Experiment execution time by stopping the Experiment’s Trials when the target
metric(s) no longer improves before the training process is complete.&lt;/p&gt;

&lt;p&gt;The major advantage of using Early Stopping in Katib is that
&lt;a href=&quot;https://www.kubeflow.org/docs/components/katib/experiment/#packaging-your-training-code-in-a-container-image&quot;&gt;the training container package&lt;/a&gt;
doesn’t need to be modified. Basically, the Experiment’s YAML has to be extended
with the new entity - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;earlyStopping&lt;/code&gt;, which is similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;algorithm&lt;/code&gt; YAML section:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kubeflow.org/v1beta1&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Experiment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubeflow&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;median-stop&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;algorithmName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;random&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;earlyStopping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;algorithmName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;medianstop&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;algorithmSettings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;min_trials_required&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;start_step&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;objective&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;maximize&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.99&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;objectiveMetricName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Validation-accuracy&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;additionalMetricNames&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Train-accuracy&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;parallelTrialCount&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;maxTrialCount&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;maxFailedTrialCount&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;. . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Currently, Katib supports the Median Stopping Rule. The Medium Stopping rule
stops a running Trial at the step &lt;strong&gt;S&lt;/strong&gt; if the Trial’s best objective value is
lower than the median value of all succeeded Trials’ objectives reported up to
that step &lt;strong&gt;S&lt;/strong&gt;. Readers interested in learning more about the Median Stopping
Rule can check the
&lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/46180.pdf&quot;&gt;Google Vizier: A Service for Black-Box Optimization&lt;/a&gt;
paper.&lt;/p&gt;

&lt;p&gt;To know more about using Early Stopping in Katib please follow the
&lt;a href=&quot;https://www.kubeflow.org/docs/components/katib/early-stopping/&quot;&gt;official guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;getting-involved&quot;&gt;Getting Involved&lt;/h2&gt;

&lt;p&gt;First of all, thanks a lot to our contributors
(&lt;a href=&quot;https://github.com/sperlingxx&quot;&gt;Alfred Xu (Nvidia)&lt;/a&gt;,
&lt;a href=&quot;https://github.com/andreyvelich&quot;&gt;Andrey Velichkevich (Cisco)&lt;/a&gt;,
&lt;a href=&quot;https://github.com/akirillov&quot;&gt;Anton Kirillov (Mesosphere)&lt;/a&gt;,
&lt;a href=&quot;https://github.com/gaocegege&quot;&gt;Ce Gao (Tencent Cloud)&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ChenjunZou&quot;&gt;Chenjun Zou (Alibaba)&lt;/a&gt;,
&lt;a href=&quot;https://github.com/eliaskoromilas&quot;&gt;Elias Koromilas (InAccel)&lt;/a&gt;,
&lt;a href=&quot;https://github.com/xuhdev&quot;&gt;Hong Xu (IBM)&lt;/a&gt;,
&lt;a href=&quot;https://github.com/johnugeorge&quot;&gt;Johnu George (Cisco)&lt;/a&gt;,
&lt;a href=&quot;https://github.com/c-bata&quot;&gt;Masashi Shibata&lt;/a&gt;,
&lt;a href=&quot;https://github.com/vpavlin&quot;&gt;Vaclav Pavlin (Red Hat)&lt;/a&gt;,
&lt;a href=&quot;https://github.com/PatrickXYS&quot;&gt;Yao Xiao (AWS)&lt;/a&gt;,
&lt;a href=&quot;https://github.com/terrytangyuan&quot;&gt;Yuan Tang (Ant Group)&lt;/a&gt;) who helped with the
0.10 release. Our community is growing and we are inviting new users and AutoML
enthusiasts to contribute to the Katib project. The following links provide
information about getting involved in the community:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Subscribe
&lt;a href=&quot;https://calendar.google.com/calendar/u/0/r?cid=ZDQ5bnNpZWZzbmZna2Y5MW8wdThoMmpoazRAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ&quot;&gt;to the calendar&lt;/a&gt;
to attend the AutoML WG community meeting.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check
&lt;a href=&quot;https://docs.google.com/document/d/1MChKfzrKAeFRtYqypFbMXL6ZIc_OgijjkvbqmwRV-64/edit&quot;&gt;the AutoML WG meeting notes&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Join
&lt;a href=&quot;https://kubeflow.slack.com/archives/C018PMV53NW&quot;&gt;the AutoML WG Slack channel&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check
&lt;a href=&quot;https://github.com/kubeflow/katib/blob/master/ADOPTERS.md&quot;&gt;the Katib adopters list&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Learn more about Katib in
&lt;a href=&quot;https://github.com/kubeflow/katib/blob/master/docs/presentations.md&quot;&gt;the presentations and demos list&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please let us know about the active use-cases, feature requests and questions
in the AutoML Slack channel or submit a new
&lt;a href=&quot;https://github.com/kubeflow/katib/issues/new/choose&quot;&gt;GitHub issue&lt;/a&gt;. To know
more about the new Katib UI or to track the current integration process
please check &lt;a href=&quot;https://github.com/kubeflow/katib/projects/1&quot;&gt;the GitHub project&lt;/a&gt;.
We are planning to arrange a webinar and tutorial session for using AutoML in
Kubeflow soon. Please join the
&lt;a href=&quot;https://groups.google.com/g/kubeflow-discuss&quot;&gt;kubeflow-discuss mailing list&lt;/a&gt;
to know more about it.&lt;/p&gt;

&lt;p&gt;Special Thanks to Amit Saha (Cisco), Ce Gao (Tencent Cloud), Johnu George (Cisco),
Jorge Castro (Arrikto), Josh Bottum (Arrikto) for their help on this blog.&lt;/p&gt;</content><author><name>&lt;a href='https://www.linkedin.com/in/andrey-velichkevich/'&gt;Andrey Velichkevich&lt;/a&gt;</name></author><category term="katib" /><category term="release" /><category term="automl" /><category term="hyperparameter tuning" /><summary type="html">As machine learning (ML) architectures are increasing in complexity, it is becoming important to find the optimal hyperparameters and architecture for ML models. Automated machine learning (AutoML) has become a crucial step in the ML lifecycle. Katib provides AutoML features in Kubeflow in a Kubernetes native way.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.kubeflow.org/images/logo.png" /><media:content medium="image" url="https://blog.kubeflow.org/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Operationalize, Scale and Infuse Trust in AI Models using KFServing</title><link href="https://blog.kubeflow.org/release/official/2021/03/08/kfserving-0.5.html" rel="alternate" type="text/html" title="Operationalize, Scale and Infuse Trust in AI Models using KFServing" /><published>2021-03-08T00:00:00-06:00</published><updated>2021-03-08T00:00:00-06:00</updated><id>https://blog.kubeflow.org/release/official/2021/03/08/kfserving-0.5</id><content type="html" xml:base="https://blog.kubeflow.org/release/official/2021/03/08/kfserving-0.5.html">&lt;h4 id=&quot;by-animesh-singh-and-dan-sun&quot;&gt;By &lt;strong&gt;Animesh Singh&lt;/strong&gt; and &lt;strong&gt;Dan Sun&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;With inputs from : KFServing WG, including Yuzhui Liu, Tommy Li, Paul Vaneck, Andrew Butler, Srinivasan Parthasarathy etc.&lt;/p&gt;

&lt;p&gt;Machine Learning has become a key technology in a wide range of industries and organizations. One key aspect in ML landscape is that more and more models are getting produced, but are they actually getting deployed? And if they are getting deployed, are there enough robust operational mechanisms in place to understand model predictions, and monitor for drift, accuracy, anamoly, bias etc.? One key aspect of deploying models in production is being able to monitor the predictions for various metrics, and explaining the decisions the model is making, and producing quality metrics, more so in regulated industries like finance, healthcare, government sector etc. Additionally based on those metrics do we have a technology in place to understand the metrics and take corrective actions e.g. doing canary rollouts?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kubeflow/kfserving&quot;&gt;&lt;u&gt;KFServing&lt;/u&gt;&lt;/a&gt;, a project which originated in the Kubeflow community, has been hard at work solving production model serving use cases by providing performant, high abstraction interfaces for common ML frameworks like Tensorflow, XGBoost, ScikitLearn, PyTorch, and ONNX. It encapsulates the complexity of autoscaling, networking, health checking, and server configuration to bring cutting edge serving features like GPU Autoscaling, Scale to Zero, and Canary Rollouts to model deployments. We just released KFServing v0.5 with other various features to address the model operationalization and trust needs. Additionally, the team has been hard at work to make AI explainability a core construct of the deployed models, by integrating with various industry leading technologies.&lt;/p&gt;

&lt;h3 id=&quot;kfserving-beta-api-and-v2-next-gen-inference-protocol&quot;&gt;&lt;strong&gt;KFServing Beta API and V2 (next gen) Inference Protocol&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;KFServing 0.5 has promoted the control plane API from v1alpha2 to &lt;a href=&quot;https://github.com/kubeflow/kfserving/blob/master/docs/apis/v1beta1/README.md&quot;&gt;&lt;u&gt;stable v1beta1&lt;/u&gt;&lt;/a&gt; and started to support the data plane &lt;a href=&quot;https://github.com/kubeflow/kfserving/tree/master/docs/predict-api/v2&quot;&gt;&lt;u&gt;V2 inference protocol&lt;/u&gt;&lt;/a&gt;. The v1beta1 control plane API enables a simple, data scientist-friendly interface, while providing the flexibility of specifying container and pod template fields for pre-packaged model servers. The V2 inference protocol pushes a standard and easy-to-use high performance REST/gRPC API across multiple model servers, such as Triton and MLServer, to increase the portability of the model ensuring the client/server can operate seamlessly.&lt;/p&gt;

&lt;p&gt;KFServing 0.5 also introduces an optional model agent for request/response logging, request batching, and model pulling. The model agent sits alongside as a sidecar to the model server. Pre-packaged Model servers plugged onto KFServing can benefit from these common model serving features, as well as the model servers built using custom frameworks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-03-08-kfserving-0.5/image1.png&quot; style=&quot;width:6.5in;height:3.26389in&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;whats-new&quot;&gt;What’s New?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/PyTorch/status/1346466660744511492&quot;&gt;&lt;u&gt;TorchServe integration&lt;/u&gt;&lt;/a&gt;: TorchServe now is used as implementation for KFServing PyTorch model server, it also enables model explanability with &lt;a href=&quot;https://captum.ai/&quot;&gt;&lt;u&gt;Captum&lt;/u&gt;&lt;/a&gt;, see TorchServe examples &lt;a href=&quot;https://github.com/kubeflow/kfserving/tree/master/docs/samples/v1beta1/torchserve&quot;&gt;&lt;u&gt;here&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Triton Inference Server V2 inference REST/gRPC protocol support, see examples of serving &lt;a href=&quot;https://github.com/kubeflow/kfserving/tree/master/docs/samples/v1beta1/triton/bert&quot;&gt;&lt;u&gt;BERT&lt;/u&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/kubeflow/kfserving/tree/master/docs/samples/v1beta1/triton/torchscript&quot;&gt;&lt;u&gt;TorchScript&lt;/u&gt;&lt;/a&gt; models on GPUs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tensorflow &lt;a href=&quot;https://github.com/kubeflow/kfserving/tree/master/docs/samples/v1beta1/tensorflow#create-the-inferenceservice-with-grpc&quot;&gt;&lt;u&gt;gRPC support&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/kubeflow/kfserving/tree/master/docs/samples/v1beta1/sklearn&quot;&gt;&lt;u&gt;SKLearn&lt;/u&gt;&lt;/a&gt;/&lt;a href=&quot;https://github.com/kubeflow/kfserving/tree/master/docs/samples/v1beta1/xgboost&quot;&gt;&lt;u&gt;XGBoost&lt;/u&gt;&lt;/a&gt; model server now uses &lt;a href=&quot;https://github.com/SeldonIO/MLServer&quot;&gt;&lt;u&gt;MLServer&lt;/u&gt;&lt;/a&gt; which supports v2 inference protocol.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New model servers added for &lt;a href=&quot;https://github.com/kubeflow/kfserving/tree/master/docs/samples/v1beta1/pmml&quot;&gt;&lt;u&gt;pmml&lt;/u&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/kubeflow/kfserving/tree/master/docs/samples/v1beta1/lightgbm&quot;&gt;&lt;u&gt;lightgbm&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can now specify container or pod template level fields on the pre-packaged model servers (e.g., &lt;a href=&quot;https://github.com/kubeflow/kfserving/blob/master/docs/samples/v1beta1/triton/torchscript/torchscript.yaml&quot;&gt;&lt;u&gt;env variables&lt;/u&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/kubeflow/kfserving/blob/master/docs/samples/v1beta1/advanced/probes.yaml&quot;&gt;&lt;u&gt;readiness/liveness probes&lt;/u&gt;&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Allow specifying &lt;a href=&quot;https://github.com/kubeflow/kfserving/blob/master/docs/samples/v1beta1/advanced/timeout.yaml&quot;&gt;&lt;u&gt;timeouts on the component spec&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/kubeflow/kfserving/tree/master/docs/samples/v1beta1/rollout&quot;&gt;&lt;u&gt;Simplified canary rollout&lt;/u&gt;&lt;/a&gt;, you no longer need to specify both the default and canary specs on the InferenceService spec; KFServing now automatically tracks the last rolled out revision and automatically splits the traffic between the latest ready revision and last rolled out revision.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The transformer to predictor call now defaults to using &lt;a href=&quot;https://github.com/kubeflow/kfserving/blob/master/python/kfserving/kfserving/kfmodel.py#L59&quot;&gt;&lt;u&gt;AsyncIO&lt;/u&gt;&lt;/a&gt;, which significantly improves the latency/throughput for high concurrent workload use cases.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kfserving-multi-model-serving-to-enable-massive-scalability&quot;&gt;&lt;strong&gt;KFServing Multi-Model Serving to enable massive scalability&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;With machine learning approaches becoming more widely adopted in organizations, there is a trend to deploy a large number of models. The original design of KFServing deploys one model per InferenceService. But when dealing with a large number of models, its ‘one model, one server’ paradigm presents challenges on a Kubernetes cluster to deploy hundreds of thousands of models. To scale the number of models, we have to scale the number of InferenceServices, something that can quickly challenge the cluster’s limits.&lt;/p&gt;

&lt;p&gt;Multi-model serving is an &lt;a href=&quot;https://kubernetes.io/docs/reference/using-api/#api-versioning&quot;&gt;&lt;u&gt;alpha&lt;/u&gt;&lt;/a&gt; feature added in 0.5 to increase KFServing’s scalability. To learn more about multi-model serving motivations and implementation deatils, &lt;a href=&quot;https://github.com/kubeflow/kfserving/blob/master/docs/MULTIMODELSERVING_GUIDE.md&quot;&gt;dive into the details in KFServing github&lt;/a&gt;. Please assume that the interface is subject to change. The experimental feature must be enabled from the inference service configmap.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-03-08-kfserving-0.5/image2.png&quot; style=&quot;width:6.5in;height:2.31944in&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Multi-model serving will work with any model server that implements KFServing’s &lt;a href=&quot;https://github.com/triton-inference-server/server/tree/master/docs/protocol&quot;&gt;&lt;u&gt;V2 protocol&lt;/u&gt;&lt;/a&gt;. More specifically, if the model server implements the &lt;a href=&quot;https://github.com/triton-inference-server/server/blob/master/docs/protocol/extension_model_repository.md#load&quot;&gt;&lt;u&gt;load&lt;/u&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/triton-inference-server/server/blob/master/docs/protocol/extension_model_repository.md#unload&quot;&gt;&lt;u&gt;unload&lt;/u&gt;&lt;/a&gt; endpoint, then it can use KFServing’s TrainedModel. Currently, the supported model servers are Triton, SKLearn, and XGBoost. Click on &lt;a href=&quot;https://github.com/kubeflow/kfserving/tree/master/docs/samples/multimodelserving/triton&quot;&gt;&lt;u&gt;Triton&lt;/u&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/kubeflow/kfserving/tree/master/docs/samples/multimodelserving/sklearn&quot;&gt;&lt;u&gt;SKLearn&lt;/u&gt;&lt;/a&gt; for examples on how to run Multi-Model Serving.&lt;/p&gt;

&lt;h3 id=&quot;kfserving-on-openshift&quot;&gt;&lt;strong&gt;KFServing on OpenShift&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;RedHat OpenShift is a market leader for enterprise Kubernetes distribution, and by enabling KFServing for OpenShift we have ensured that enterprises running battle hardened OpenShift platform can leverage KFServing to bring serverless model inferencing on OpenShift, including how to leverage OpenShift Service Mesh. Please follow the details here to get &lt;a href=&quot;https://github.com/kubeflow/kfserving/blob/master/docs/OPENSHIFT_GUIDE.md&quot;&gt;&lt;u&gt;KFServing running on OpenShift&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-03-08-kfserving-0.5/image3.png&quot; style=&quot;width:6.5in;height:2.86111in&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;lfai-trusted-ai-projects-on-ai-fairness-ai-explainability-and-adversarial-robustness-in-kfserving&quot;&gt;&lt;strong&gt;LFAI Trusted AI Projects on AI Fairness, AI Explainability and Adversarial Robustness in KFServing&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Trust and responsibility should be core principles of AI. &lt;a href=&quot;https://lfaidata.foundation/projects/trusted-ai/&quot;&gt;&lt;u&gt;The LF AI &amp;amp; Data Trusted AI Committee&lt;/u&gt;&lt;/a&gt; is a global group working on policies, guidelines, tools and projects to ensure the development of trustworthy AI solutions, and we have integrated LFAI AI Explainability 360, Adversarial Robustness 360 in KFServing to provide production level trusted AI capabilities. Please find more details on these integration in the following links&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kubeflow/kfserving/blob/master/docs/samples/explanation/aix/mnist/README.md&quot;&gt;&lt;u&gt;AI Explainability 360-KFServing Integration&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kubeflow/kfserving/tree/master/docs/samples/explanation/aif/germancredit&quot;&gt;&lt;u&gt;AI Fairness 360-KFServing Integration&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kubeflow/kfserving/tree/master/docs/samples/explanation/art/mnist&quot;&gt;&lt;u&gt;Adversarial Robustness Toolbox-KFServing Integration&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-03-08-kfserving-0.5/image4.png&quot; style=&quot;width:6.5in;height:2.63889in&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;metrics-driven-automated-rollouts-using-iter8-in-kfserving&quot;&gt;&lt;strong&gt;Metrics driven automated rollouts using Iter8 in KFServing&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Iter8-KFServing enables metrics-driven experiments, progressive delivery, and automated rollouts for ML models served over Kubernetes and OpenShift clusters. Iter8 &lt;em&gt;experiments&lt;/em&gt; can be used to safely expose competing versions of a model to traffic while gathering and assessing metrics to intelligently shift traffic to the &lt;em&gt;winning&lt;/em&gt; version of your model. Discover how to set it up and get it running in the &lt;a href=&quot;https://github.com/iter8-tools/iter8-kfserving&quot;&gt;&lt;u&gt;Iter8-KFServing repository&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021-03-08-kfserving-0.5/image5.png&quot; style=&quot;width:6.5in;height:3.65278in&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;join-us-to-build-trusted-model-inferencing-platform-on-kubernetes&quot;&gt;&lt;strong&gt;Join us to build Trusted Model Inferencing Platform on Kubernetes&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Please join us on the &lt;a href=&quot;https://github.com/kubeflow/kfserving&quot;&gt;&lt;u&gt;KFServing GitHub repository&lt;/u&gt;&lt;/a&gt;, try it out, give feedback, and raise issues. Additionally, you can connect with us via the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To contribute and build an enterprise-grade, end-to-end machine learning platform on OpenShift and Kubernetes, please &lt;a href=&quot;https://www.kubeflow.org/&quot;&gt;&lt;u&gt;join the Kubeflow community&lt;/u&gt;&lt;/a&gt; and reach out with any questions, comments, and feedback!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want help deploying and managing Kubeflow on your on-premises Kubernetes platform, OpenShift, or on IBM Cloud, please &lt;a href=&quot;https://mail.google.com/mail/u/0/?view=cm&amp;amp;fs=1&amp;amp;tf=1&amp;amp;source=mailto&amp;amp;su=Kubeflow%25sInquiry&amp;amp;to=singhan@us.ibm.com&quot;&gt;&lt;u&gt;connect with us&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://opendatahub.io/&quot;&gt;&lt;u&gt;Check out the OpenDataHub&lt;/u&gt;&lt;/a&gt; if you are interested in open source projects in the Data and AI portfolio, namely Kubeflow, Kafka, Hive, Hue, and Spark, and how to bring them together in a cloud-native way.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;contributor-acknowledgement&quot;&gt;&lt;strong&gt;Contributor Acknowledgement&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;We’d like to thank all the KFServing contributors for the awesome work!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/animeshsingh&quot;&gt;Animesh Singh&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/jinchihe&quot;&gt;Jinchi He&lt;/a&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/cliveseldon&quot;&gt;Clive Cox&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ellistarn&quot;&gt;Ellis Tarn&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/pugangxa&quot;&gt;Pu Gang&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/Iamlovingit&quot;&gt;Qianshan Chen&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/yuzliu&quot;&gt;Yuzhui Liu&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/salanki&quot;&gt;Peter Salanki&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/jagadeeshi2i&quot;&gt;Jagadeesh&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/deadeyegoodwin&quot;&gt;David Goodwin&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ifilonenko&quot;&gt;Ilan Filonenko&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/jazzsir&quot;&gt;Hanbae Seo&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ryandawsonuk&quot;&gt;Ryan Dawson&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/pvaneck&quot;&gt;Paul Van Eck&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/wengyao04&quot;&gt;Weng Yao&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/theofpa&quot;&gt;Theofilos Papapanagiotou&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/tduffy000&quot;&gt;Tom Duffy&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/drewbutlerbb4&quot;&gt;Andrew Butler&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/adriangonz&quot;&gt;Adrian Gonzalez-Martin&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/njhill&quot;&gt;Nick Hill&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/PatrickXYS&quot;&gt;Yao Xiao&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/AnyISalIn&quot;&gt;AnyISalIn&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/abchoo&quot;&gt;Aaron Choo&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://github.com/mszacillo&quot;&gt;Michas Szacillo&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://github.com/yuzisun&quot;&gt;Dan Sun&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/chauhang&quot;&gt;Geeta Chauhan&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/Tomcli&quot;&gt;Tommy Li&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="release" /><category term="official" /><summary type="html">By Animesh Singh and Dan Sun</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.kubeflow.org/images/2021-03-08-kfserving-0.5/image4.png" /><media:content medium="image" url="https://blog.kubeflow.org/images/2021-03-08-kfserving-0.5/image4.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Kubeflow 1.2 release announcement</title><link href="https://blog.kubeflow.org/release/official/2020/11/18/kubeflow-1.2-blog-post.html" rel="alternate" type="text/html" title="Kubeflow 1.2 release announcement" /><published>2020-11-18T00:00:00-06:00</published><updated>2020-11-18T00:00:00-06:00</updated><id>https://blog.kubeflow.org/release/official/2020/11/18/kubeflow-1.2-blog-post</id><content type="html" xml:base="https://blog.kubeflow.org/release/official/2020/11/18/kubeflow-1.2-blog-post.html">&lt;h2 id=&quot;special-message-from-kubeflow-founders&quot;&gt;Special Message from Kubeflow Founders&lt;/h2&gt;

&lt;p&gt;Three years (!!) ago, we (Jeremy Lewi, Vish Kannan and David Aronchick) &lt;a href=&quot;https://www.youtube.com/watch?v=R3dVF5wWz-g&quot;&gt;stood on stage at Kubecon&lt;/a&gt; to introduce Kubeflow for the first time. We could not have possibly imagined what would have come about - thousands of GitHub stars, tens of thousands of commits and a community that has built the most flexible and scalable platform for machine learning. And, best of all, it’s not backed by an enormous company that requires you to “upgrade” in order to use it; we gave it all away for free! Here’s to everything you all have done and we could not be more excited about the NEXT three years (and the three years beyond that). Thank you!&lt;/p&gt;

&lt;h2 id=&quot;announcing-kubeflow-v12-release&quot;&gt;Announcing Kubeflow v1.2 release&lt;/h2&gt;

&lt;p&gt;The Kubeflow Community’s delivery of the Kubeflow 1.2 software release includes ~100 user requested enhancements to improve model building, training, tuning, ML pipelining and serving.  This post includes a Release Highlights Section, which details significant 1.2 features as contributed by the Kubeflow application working groups (WG), SIGs, and ecosystem partners.  The Kubeflow 1.2 &lt;a href=&quot;https://github.com/kubeflow/manifests/releases/tag/v1.2-rc.0&quot;&gt;changelog&lt;/a&gt; provides a quick view of the 1.2 deliveries.&lt;/p&gt;

&lt;p&gt;The Release was validated, tested and documented by the developers, and the Release is now being validated, tested and documented by users, cloud providers and commercial support partners on popular platforms i.e. AWS, Azure, GCP, IBM, etc.   The Community is working on a more sustainable approach to owning and maintaining test infrastructure.&lt;/p&gt;

&lt;p&gt;For Release 1.2, AWS has built and contributed a shared test-infra, which provides WG owners with enough permissions to identify problems, and test proposed solutions to completion. Currently, most WGs (AutoML, Training-Operators, KFServing, Deployments, Manifests) have already migrated their tests on this solution. As a result, the test-infra blocking time has fallen significantly, which is good for users and contributors.&lt;/p&gt;

&lt;h2 id=&quot;getting-involved&quot;&gt;Getting Involved&lt;/h2&gt;

&lt;p&gt;The Community continues to grow and we invite new users and contributors to join the Working Groups and Community Meetings. The following provides some helpful links to those looking to get involved with the Kubeflow Community:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Join the &lt;a href=&quot;https://app.slack.com/client/T7QLHSH6U/C7REE0EHK/thread/C7REE0EHK-1554222405.030500&quot;&gt;Kubeflow Slack channel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Join the &lt;a href=&quot;https://groups.google.com/g/kubeflow-discuss&quot;&gt;kubeflow-discuss mailing list&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Attend a &lt;a href=&quot;https://github.com/kubeflow/community&quot;&gt;Weekly Community Meeting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Review the Working Group Meeting Notes in Release Highlights Section (as the Notes include great discussions and meeting times)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have questions and/or run into issues, please leverage the Kubeflow Slack channel and/or submit bugs via &lt;a href=&quot;https://github.com/kubeflow&quot;&gt;Kubeflow on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next&lt;/h2&gt;

&lt;p&gt;The Community has started discussions on Kubeflow 1.3. Arrikto has agreed to lead the 1.3 Release Management process and the Community will continue to capture input from users and contributors as features are defined, developed and delivered. Onward and upward!&lt;/p&gt;

&lt;p&gt;Special thanks to Constantinos Venetsanopoulos (Arrikto), Animesh Singh (IBM), Jiaxin Shan (ByteDance),  Yao Xiao (AWS), David Aronchick (Azure), Dan Sun (Bloomberg), Andrey Velichkevich (Cisco), Matthew Wicks (Eliiza), Willem Pienaar (Feast), Yuan Gong (Google), James Wu (Google), Jeremy Lewi (Google), Josh Bottum (Arrikto), Chris Pavlou (Arrikto), Kimonas Sotirchos (Arrikto), Rui Vasconcelos (Canonical), Jeff Fogarty (US Bank) , Karl Shriek (AlexanderThamm), and Clive Cox (Seldon) for their help on 1.2 and this post.&lt;/p&gt;

&lt;h2 id=&quot;release-highlights-section&quot;&gt;Release Highlights Section&lt;/h2&gt;

&lt;h3 id=&quot;working-group-automl--katib&quot;&gt;Working Group: AutoML / Katib&lt;/h3&gt;

&lt;p&gt;Working Group Meeting Notes: &lt;a href=&quot;https://docs.google.com/document/d/1MChKfzrKAeFRtYqypFbMXL6ZIc_OgijjkvbqmwRV-64/edit#heading=h.yvypq06ot57p&quot;&gt;Katib Working Group Meeting Notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Overall benefit: Better model accuracy, Better infrastructure utilization&lt;/p&gt;

&lt;p&gt;Overall description: Katib 0.10 with the new v1beta1 API has been released in Kubeflow 1.2. Automated configuration of Hyperparameters to deliver more accuracy models that use less infrastructure, AutoML / Katib simplified the process of finding the optimized set of parameters for your model with Early Stopping techniques. Possibility to orchestrate complex pipeline during Katib Experiment with custom Kubernetes CRD support.&lt;/p&gt;

&lt;h4 id=&quot;feature-name-early-stopping&quot;&gt;Feature Name: &lt;a href=&quot;https://github.com/kubeflow/katib/pull/1344&quot;&gt;Early Stopping&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Feature Description: Save your cluster resources by using Katib Early Stopping techniques. Allow to use the Median Stopping Rule algorithm.&lt;/p&gt;

&lt;p&gt;Feature Benefit: You don’t need to modify your training source code to use the feature! Early Stopping can be used with every Katib algorithm.&lt;/p&gt;

&lt;h4 id=&quot;feature-name-support-custom-crd-in-the-new-trial-template&quot;&gt;Feature Name: Support &lt;a href=&quot;https://github.com/kubeflow/katib/issues/1214&quot;&gt;custom CRD&lt;/a&gt; in the &lt;a href=&quot;https://github.com/kubeflow/katib/issues/1208&quot;&gt;new Trial template&lt;/a&gt;.&lt;/h4&gt;

&lt;p&gt;Feature Description: You are able to follow two simple steps to integrate your custom Kubernetes resource in Katib. Flexible way to send your hyperparameters in the new Trial template design, which is a valid YAML.&lt;/p&gt;

&lt;p&gt;Feature Benefit: Define &lt;a href=&quot;https://github.com/tektoncd/pipeline&quot;&gt;Tekton Pipeline&lt;/a&gt; in your Katib experiment. You are able to pass hyperparameters even if your model config is a JSON scikit learn Pipeline.&lt;/p&gt;

&lt;h4 id=&quot;feature-name-resume-experiments&quot;&gt;Feature Name: &lt;a href=&quot;https://github.com/kubeflow/katib/issues/1250&quot;&gt;Resume Experiments&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Feature Description: Implementation of the various methods to resume Katib Experiments. Save the Experiment’s Suggestion data in the custom volume. Use Katib config to modify your volume settings.&lt;/p&gt;

&lt;p&gt;Feature Benefit: Free your cluster resources after your Experiment is finished.&lt;/p&gt;

&lt;h4 id=&quot;feature-name-multiple-ways-to-extract-metrics&quot;&gt;Feature Name: &lt;a href=&quot;https://github.com/kubeflow/katib/pull/1140&quot;&gt;Multiple Ways to Extract Metrics&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Feature Description: You can specify metrics strategies for your Experiment. Katib computes the Experiment objective based on these values. You are able to view detailed metric info for each Trial.&lt;/p&gt;

&lt;p&gt;Feature Benefit: Get correct optimisation results when your model produces necessary value at the final training step.&lt;/p&gt;

&lt;h3 id=&quot;working-group-kfserving&quot;&gt;Working Group: KFServing&lt;/h3&gt;

&lt;p&gt;Working Group Meeting Notes: &lt;a href=&quot;https://docs.google.com/document/d/1KZUURwr9MnHXqHA08TFbfVbM8EAJSJjmaMhnvstvi-k/edit&quot;&gt;KFServing Working Group Meeting Notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Overall benefit: KFServing enables serverless inferencing on Kubernetes and provides performant, high abstraction interfaces for common machine learning (ML) frameworks like TensorFlow, XGBoost, scikit-learn, PyTorch, and ONNX to solve production model serving use cases.&lt;/p&gt;

&lt;p&gt;Overall description:  Kubeflow 1.2 includes KFServing v0.4.1, where the focus has been on enabling KFServing on OpenShift and additionally providing more features, such as adding batcher module as sidecar, Triton inference server renaming and integrations, upgrading Alibi explainer to 0.4.0, updating logger to CloudEvents V1 protocol and allowing customized URL paths on data plane. Additionally, the minimum Istio is now v1.3.1, and KNative version has been moved to KNative 0.14.3. More details can be found &lt;a href=&quot;https://github.com/kubeflow/kfserving/releases/tag/v0.4.0&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/kubeflow/kfserving/releases/tag/v0.4.1&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;feature-name-add-batcher-module-as-sidecar-847-zhangrongguo&quot;&gt;Feature Name: Add batcher module as sidecar &lt;a href=&quot;https://github.com/kubeflow/kfserving/pull/847&quot;&gt;#847&lt;/a&gt; &lt;a href=&quot;https://github.com/zhangrongguo&quot;&gt;@zhangrongguo&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Feature Description: KFServer Batcher accepts user requests, batch them and then send to the “InferenceService”.  &lt;a href=&quot;https://docs.google.com/document/d/14aa5zRtwK1zqcXdpQc9YClTduhtj8vr9waJcm0vR2GQ/edit#&quot;&gt;Batcher Feature Description&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feature Benefit: Faster response time to inference requests, and Improve infrastructure utilization&lt;/p&gt;

&lt;h4 id=&quot;feature-name-alibi-explainer-upgrade-to-040-803-cliveseldon&quot;&gt;Feature Name: Alibi explainer upgrade to 0.4.0 &lt;a href=&quot;https://github.com/kubeflow/kfserving/pull/803&quot;&gt;#803&lt;/a&gt; &lt;a href=&quot;https://github.com/cliveseldon&quot;&gt;@cliveseldon&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Feature Description: The enhancements include a KernelSHAP explainer for black-box model SHAP scores and documentation for the LinearityMeasure algorithm.   This delivery includes a new API for explainer and explanation objects, which provide a variety of improvements, but are breaking changes.&lt;/p&gt;

&lt;p&gt;Feature Benefit: This delivery improves the ability to understand which features impact model accuracy along with improving operations.&lt;/p&gt;

&lt;h4 id=&quot;feature-namedescription--triton-inference-server-rename-and-integrations-747-deadeyegoodwin&quot;&gt;Feature Name/Description : Triton inference server rename and integrations &lt;a href=&quot;https://github.com/kubeflow/kfserving/pull/747&quot;&gt;#747&lt;/a&gt; &lt;a href=&quot;https://github.com/deadeyegoodwin&quot;&gt;@deadeyegoodwin&lt;/a&gt;&lt;/h4&gt;

&lt;h3 id=&quot;working-group-pipelines&quot;&gt;Working Group: Pipelines&lt;/h3&gt;

&lt;p&gt;Working Group Meeting Notes: &lt;strong&gt;&lt;a href=&quot;http://bit.ly/kfp-meeting-notes&quot;&gt;http://bit.ly/kfp-meeting-notes&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Overall benefit: Simplify process of creating a model when you have new data and new code&lt;/p&gt;

&lt;p&gt;Overall description: Kubeflow Pipelines is a platform for building and deploying portable, scalable machine learning (ML) workflows based on containers.  The Kubeflow Pipelines platform consists of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A user interface (UI) for managing and tracking experiments, jobs, and runs.&lt;/li&gt;
  &lt;li&gt;An engine for scheduling multi-step ML workflows.&lt;/li&gt;
  &lt;li&gt;An SDK for defining and manipulating pipelines and components.&lt;/li&gt;
  &lt;li&gt;Notebooks for interacting with the system using the SDK.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following are the goals of Kubeflow Pipelines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;End-to-end orchestration: enabling and simplifying the orchestration of machine learning pipelines.&lt;/li&gt;
  &lt;li&gt;Easy experimentation: making it easy for you to try numerous ideas and techniques and manage your various trials/experiments.&lt;/li&gt;
  &lt;li&gt;Easy re-use: enabling you to re-use components and pipelines to quickly create end-to-end solutions without having to rebuild each time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kubeflow Pipelines is stabilizing over a few patch releases. At the same time, we made a lot of progress at standardizing the &lt;a href=&quot;https://github.com/kubeflow/pipelines/blob/master/api/v2alpha1/pipeline_spec.proto&quot;&gt;pipeline IR (intermediate representation) &lt;/a&gt; which will serve as a unified pipeline definition for different execution engines.&lt;/p&gt;

&lt;h4 id=&quot;feature-name-kubeflow-pipelines-with-tekton-backend-available&quot;&gt;Feature Name: Kubeflow Pipelines with Tekton backend available&lt;/h4&gt;

&lt;p&gt;Feature Description:  After an extensive effort, we have &lt;a href=&quot;https://github.com/kubeflow/kfp-tekton&quot;&gt;Kubeflow Pipelines running on Tekton end-to-end and available in open source&lt;/a&gt;. Additionally it’s available as default with &lt;a href=&quot;https://www.kubeflow.org/docs/ibm/pipelines/&quot;&gt;Kubeflow deployment on IBM Cloud&lt;/a&gt;, and &lt;a href=&quot;https://github.com/kubeflow/kfp-tekton/blob/master/guides/kfp_tekton_install.md#openshift&quot;&gt;can be deployed on OpenShift.&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;feature-benefit-tekton-support&quot;&gt;Feature Benefit: Tekton support&lt;/h4&gt;

&lt;p&gt;If you are an existing user of Tekton, or are a fan of Tekton, or running OpenShift Pipelines, get Kubeflow Pipelines running on top of it.  More details here &lt;br /&gt;
&lt;a href=&quot;https://developer.ibm.com/blogs/kubeflow-pipelines-with-tekton-and-watson/&quot;&gt;https://developer.ibm.com/blogs/kubeflow-pipelines-with-tekton-and-watson/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-11-18-kubeflow-1-2-announcement/kfp-tekton-support.png&quot; width=&quot;&quot; alt=&quot;Teckton Support&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;feature-name-stabilizing-kubeflow-pipelines-10x&quot;&gt;Feature Name: stabilizing Kubeflow Pipelines 1.0.x&lt;/h4&gt;

&lt;p&gt;Feature Description: We are stabilizing Kubeflow Pipelines over a few patch releases: &lt;a href=&quot;https://github.com/kubeflow/pipelines/blob/1.0.4/CHANGELOG.md&quot;&gt;Kubeflow Pipelines 1.0.4&lt;/a&gt; Changelog ~20 fixes and ~5 minor features.&lt;/p&gt;

&lt;h3 id=&quot;working-group-notebooks&quot;&gt;Working Group: Notebooks&lt;/h3&gt;

&lt;p&gt;Working Group Meeting Notes: coming soon&lt;/p&gt;

&lt;p&gt;Overall benefit: Interactive, experimental coding environment for model development&lt;/p&gt;

&lt;p&gt;Overall description: Notebooks provide an advanced, interactive coding environment that users and teams can share and leverage kubernetes namespaces for isolation and resource utilization&lt;/p&gt;

&lt;h4 id=&quot;feature-name-affinitytoleration-configs-5237&quot;&gt;Feature Name: Affinity/Toleration configs, &lt;a href=&quot;https://github.com/kubeflow/kubeflow/pull/5237&quot;&gt;#5237&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Feature Description: Adds the ability for Kubeflow administrators to set groups of Affinity/Toleration configs which users can pick from a dropdown.&lt;/p&gt;

&lt;p&gt;Feature Benefit: Allows more fine-grained selection of how Notebook pods are scheduled.&lt;/p&gt;

&lt;h4 id=&quot;feature-name-refactor-notebooks-web-app&quot;&gt;Feature Name: Refactor Notebooks Web App&lt;/h4&gt;

&lt;p&gt;Feature Description: The details of the refactoring are defined in these deliveries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Common code between the different python backends,  &lt;a href=&quot;https://github.com/kubeflow/kubeflow/pull/5164&quot;&gt;#5164&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Create an Angular Library with common frontend code, &lt;a href=&quot;https://github.com/kubeflow/kubeflow/pull/5252&quot;&gt;#5252&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Refactor the JWA backend to utilize common code, &lt;a href=&quot;https://github.com/kubeflow/kubeflow/pull/5316&quot;&gt;#5316&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initialize the Jupyter web app frontend in crud-web-apps, &lt;a href=&quot;https://github.com/kubeflow/kubeflow/pull/5332&quot;&gt;#5332&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feature Benefit : Refactoring will enable an easier future integration with other web apps - Tensorboard, volume manager.&lt;/p&gt;

&lt;h4 id=&quot;feature-name-stop-and-restart-notebooks-while-maintaining-state-4857-5332&quot;&gt;Feature Name: Stop and Restart Notebooks while maintaining state, &lt;a href=&quot;https://github.com/kubeflow/kubeflow/issues/4857&quot;&gt;#4857&lt;/a&gt; &lt;a href=&quot;https://github.com/kubeflow/kubeflow/pull/5332&quot;&gt;#5332&lt;/a&gt;&lt;/h4&gt;
&lt;h5 id=&quot;note-the-artifacts-for-the-updated-notebooks-web-app-will-be-available-in-121-or-later&quot;&gt;NOTE: The artifacts for the updated Notebooks web app will be available in 1.2.1 or later&lt;/h5&gt;

&lt;p&gt;Feature Description: Implementation of a “shut down server” button in the central dashboard that scales the stateful set for the server down to zero and a “start server” button that scales it back up again.&lt;/p&gt;

&lt;p&gt;Feature Benefit: Save work, save infrastructure resources&lt;/p&gt;

&lt;h3 id=&quot;working-group-training-operators&quot;&gt;Working Group: Training-Operators&lt;/h3&gt;

&lt;p&gt;Working Group Meeting Notes: coming soon&lt;/p&gt;

&lt;p&gt;Overall benefit: Faster model development using operators that simplify distributed computing&lt;/p&gt;

&lt;h4 id=&quot;feature-name-the-training-operator-contributors-provided-the-following-fixes-and-improvements-in-kubeflow-12&quot;&gt;Feature Name: The Training Operator contributors provided the following fixes and improvements in Kubeflow 1.2:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Update mxnet-operator manifest to v1 (&lt;a href=&quot;https://github.com/kubeflow/manifests/pull/1326&quot;&gt;#1326&lt;/a&gt;, &lt;a href=&quot;https://github.com/Jeffwan&quot;&gt;@Jeffwan&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Correct XGBoostJob CRD group name and add singular name (&lt;a href=&quot;https://github.com/kubeflow/manifests/pull/1313&quot;&gt;#1313&lt;/a&gt;, &lt;a href=&quot;https://github.com/terrytangyuan&quot;&gt;@terrytangyuan&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fix XGBoost Operator manifest issue (&lt;a href=&quot;https://github.com/kubeflow/manifests/pull/1463&quot;&gt;#1463&lt;/a&gt;, &lt;a href=&quot;https://github.com/Jeffwan&quot;&gt;@Jeffwan&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Move Pytorch operator e2e tests to AWS Prow (&lt;a href=&quot;https://github.com/kubeflow/pytorch-operator/pull/305&quot;&gt;#305&lt;/a&gt;, &lt;a href=&quot;https://github.com/Jeffwan&quot;&gt;@Jeffwan&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Support BytePS in MXNet Operator (&lt;a href=&quot;https://github.com/kubeflow/mxnet-operator/pull/82&quot;&gt;#82&lt;/a&gt;, &lt;a href=&quot;https://github.com/jasonliu747&quot;&gt;@jasonliu747&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fix error when conditions is empty in tf-operator (&lt;a href=&quot;https://github.com/kubeflow/tf-operator/pull/1185&quot;&gt;#1185&lt;/a&gt;, &lt;a href=&quot;https://github.com/Corea&quot;&gt;@Corea&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fix successPolicy logic in MXNet Operator (&lt;a href=&quot;https://github.com/kubeflow/mxnet-operator/pull/85&quot;&gt;#85&lt;/a&gt;, &lt;a href=&quot;https://github.com/jasonliu747&quot;&gt;@jasonliu747&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sig-model-management&quot;&gt;SIG: Model Management&lt;/h3&gt;

&lt;p&gt;Overall benefit: The ability to find model versions and their subcomponents including metadata&lt;/p&gt;

&lt;p&gt;SIG Meeting Notes: &lt;a href=&quot;https://docs.google.com/document/d/1R2r1z5O4USpn3BW29-4blCoPueB3p2LAjvdKa97fT7U/edit?usp=sharing&quot;&gt;Model Management SIG Meeting Notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Overall description: The SIG was initiated to define and develop a Kubeflow solution for model management, which will make it easier to organize and find models and their artifacts.   In addition, several contributors are submitting proposals on how to define data types for ML model and data, with the goal of driving wider metadata standards, and interoperability of models between ML platforms, clouds, and frameworks.  The proposals are working to define an ontology for model and data types and tooling to search and organize that metadata.&lt;/p&gt;

&lt;p&gt;Proposals from Kubeflow Pipelines contributors, the Model Management SIG, Seldon and a MLSpec from David Aronchick (Azure) are under discussion.   Please find links to those proposals below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1YhnsMK_ktaeUKLS2XShocq4u2bcUCUcztT9rioRssOM/edit#&quot;&gt;ML Data in Kubeflow Pipelines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mlspec/schemas&quot;&gt;ML Spec from David Aronchick&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1R2r1z5O4USpn3BW29-4blCoPueB3p2LAjvdKa97fT7U/edit&quot;&gt;Model Management Proposal from Karl Schriek, SIG Tech Lead&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1yhSWRAwyB8AnxPz0FtJACHrMnj1m0g2uRiQC6GaT4UE/edit?usp=sharing&quot;&gt;Seldon’s Proposal for Initial Metadata Types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ecosystem-seldon&quot;&gt;EcoSystem: Seldon&lt;/h3&gt;

&lt;p&gt;Overall benefit: Deploy, Scale, Update models built with Kubeflow.&lt;/p&gt;

&lt;p&gt;Overall description: Seldon handles scaling of production machine learning models and provides advanced machine learning capabilities out of the box including Advanced Metrics, Request Logging, Explainers, Outlier Detectors, A/B Tests, and Canaries.&lt;/p&gt;

&lt;p&gt;Kubeflow 1.2 comes with Seldon’s 1.4 release. This release of Seldon adds further capabilities for model deployment and inferencing including the addition of batch and streaming interfaces to a deployed model. It also allows for fine grained control of how a deployed model interfaces with Kubernetes with the addition of KEDA and Pod Disruption Budget options. Finally, it begins a process of compatibility with KFServing by allowing the usage of the V2 Dataplane supported by Seldon, KFServing and NVIDIA Triton.&lt;/p&gt;

&lt;p&gt;Version: 1.4.0&lt;/p&gt;

&lt;h4 id=&quot;feature-name--stream-and-batch-support&quot;&gt;Feature Name:  Stream and Batch support&lt;/h4&gt;

&lt;p&gt;Feature Description: Streaming support for native Kafka integration. Batch prediction support from and to cloud storage.&lt;/p&gt;

&lt;p&gt;Feature Benefit: Allows Seldon users to interact with their models via RPC, Streaming or Batch as needed.&lt;/p&gt;

&lt;h4 id=&quot;feature-name-extended-kubernetes-control-via-keda-and-pdbs&quot;&gt;Feature Name: Extended kubernetes control via KEDA and &lt;a href=&quot;https://docs.seldon.io/projects/seldon-core/en/v1.4.0_a/graph/disruption-budgets.html&quot;&gt;PDBs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Feature Description: Allows fine grained control of deployed models via autoscaling with KEDA metrics and addition of pod disruption budgets.&lt;/p&gt;

&lt;p&gt;Feature Benefit: Manage models at scale in a production cluster.&lt;/p&gt;

&lt;h4 id=&quot;feature-name-alpha-v2-dataplane&quot;&gt;Feature Name: &lt;a href=&quot;https://docs.seldon.io/projects/seldon-core/en/v1.4.0_a/graph/protocols.html#v2-kfserving-protocol&quot;&gt;Alpha V2 Dataplane&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Feature Description: Run custom python models using an updated python server along with support for the V2 Dataplane (NVIDIA Triton, KFServing, Seldon)&lt;/p&gt;

&lt;p&gt;Feature Benefit: Utilize a standard powerful protocol that is supported cross project.&lt;/p&gt;

&lt;h3 id=&quot;ecosystem-kale&quot;&gt;EcoSystem: Kale&lt;/h3&gt;

&lt;p&gt;Overall benefit: Kubeflow Workflow tool that simplifies ML pipeline building and versioning directly from a Notebook or IDE i.e. VSCode&lt;/p&gt;

&lt;p&gt;Kale GitHub repo: https://github.com/kubeflow-kale/kale&lt;/p&gt;

&lt;p&gt;Kale Tutorials:  &lt;a href=&quot;https://www.arrikto.com/tutorials/&quot;&gt;https://www.arrikto.com/tutorials/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Overall description: Kale lets you deploy Jupyter Notebooks that run on your laptop or on the cloud to Kubeflow Pipelines, without requiring any of the Kubeflow SDK boilerplate. You can define pipelines just by annotating Notebook’s code cells and clicking a deployment button in the Jupyter UI. Kale will take care of converting the Notebook to a valid Kubeflow Pipelines deployment, taking care of resolving data dependencies and managing the pipeline’s lifecycle&lt;/p&gt;

&lt;h4 id=&quot;feature-name-dog-breed-classification-example&quot;&gt;Feature Name: Dog Breed Classification example&lt;/h4&gt;

&lt;p&gt;Feature Description: Tutorial for simplified pipeline to build a model for Image Classification&lt;/p&gt;

&lt;p&gt;Feature Benefit: Faster understanding of ML workflows to deliver models with hyperparameter tuning&lt;/p&gt;

&lt;h4 id=&quot;feature-name-katib-integration-with-kale&quot;&gt;Feature Name: Katib integration with Kale&lt;/h4&gt;

&lt;p&gt;Feature Description: Automated hyperparameter tuning and reproducible katib trials using pipelines&lt;/p&gt;

&lt;p&gt;Feature Benefit: Better model accuracy and easy reproducibility and debugging&lt;/p&gt;

&lt;h4 id=&quot;feature-name-pipeline-step-caching-for-katib-trials-using-kales-integration-with-rok&quot;&gt;Feature Name: Pipeline Step Caching for Katib Trials using Kale’s integration with Rok&lt;/h4&gt;

&lt;p&gt;Feature Description: Kale recognizes when a pipeline step has been run before and fetches complete results from Rok and inserts into pipeline processing&lt;/p&gt;

&lt;p&gt;Feature Benefit: Faster hyperparameter tuning, reduced infrastructure utilization&lt;/p&gt;

&lt;h3 id=&quot;ecosystem-feast&quot;&gt;EcoSystem: Feast&lt;/h3&gt;

&lt;p&gt;Overall benefit: Feast allows teams to register, ingest, serve, and monitor machine learning features in production.&lt;/p&gt;

&lt;p&gt;Working Group Meeting Notes: &lt;a href=&quot;https://tinyurl.com/kf-feast-sig&quot;&gt;https://tinyurl.com/kf-feast-sig&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Overall description: The latest release of Feast was a concerted effort by the Feast community to make Feast available in more environments than Google Cloud. We’ve removed all hard couplings to managed services and made it possible to run Feast both on AWS and locally.&lt;/p&gt;

&lt;p&gt;Version: Feast 0.8&lt;/p&gt;

&lt;h4 id=&quot;feature-name-support-for-aws&quot;&gt;Feature Name: Support for AWS&lt;/h4&gt;

&lt;p&gt;Feature Description: Feast 0.8 now comes with support for deployment on AWS, with native support for job management on EMR, and support for both S3 and Kinesis as data sources.&lt;/p&gt;

&lt;p&gt;Feature Benefit: Finally makes it possible for Kubeflow users on AWS to run Feast&lt;/p&gt;

&lt;h4 id=&quot;feature-name-batch-only-ingestion&quot;&gt;Feature Name: Batch-only ingestion&lt;/h4&gt;

&lt;p&gt;Feature Description: Allows teams to ingest data into stores without passing the data through a stream.&lt;/p&gt;

&lt;p&gt;Feature Benefit: Allows for a more performant ingestion compared to the stream-first approach.&lt;/p&gt;

&lt;h4 id=&quot;feature-name-local-only-mode&quot;&gt;Feature Name: Local-only mode&lt;/h4&gt;

&lt;p&gt;Feature Description: Makes it possible to run Feast without any external infrastructure, using only Docker Compose or Minikube&lt;/p&gt;

&lt;p&gt;Feature Benefit: Lowers the barrier to entry for new users, and makes it easier to test and develop Feast&lt;/p&gt;

&lt;h3 id=&quot;ecosystem-on-prem-sig&quot;&gt;EcoSystem: On-Prem SIG&lt;/h3&gt;

&lt;p&gt;Description: The on-prem SIG was officially created during this release with the intent to develop best practices for Kubeflow deployment in on-prem installations. With the new release, the SIG has also secured testing infrastructure in order to provide a well-tested reference architecture.&lt;/p&gt;

&lt;p&gt;SIG Meeting Notes: &lt;a href=&quot;https://bit.ly/2LyTh14&quot;&gt;https://bit.ly/2LyTh14&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Slack channel: https://kubeflow.slack.com/archives/C01C9NPD15H&lt;/p&gt;

&lt;h3 id=&quot;platform-aws&quot;&gt;Platform: AWS&lt;/h3&gt;

&lt;p&gt;Description: Better reliability, better testing coverage by enabling E2E tests for Kubeflow AWS deployment, &lt;a href=&quot;https://www.kubeflow.org/docs/aws/notebook-server/&quot;&gt;better Kubeflow notebook user experience&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;platform-ibm&quot;&gt;Platform: IBM&lt;/h3&gt;

&lt;p&gt;Description: Pipelines and Security have been the key focus for Kubeflow on IBM Cloud for this release. On the Pipelines side, &lt;a href=&quot;https://www.kubeflow.org/docs/ibm/pipelines/&quot;&gt;Kubeflow Pipelines with Tekton is available for deployment on IBM Cloud Kubernetes Service&lt;/a&gt; and is included by default with Kubeflow deployment on IBM Cloud. On the security side, &lt;a href=&quot;https://www.kubeflow.org/docs/ibm/deploy/install-kubeflow/#multi-user-auth-enabled&quot;&gt;we have enabled integration with IBM Cloud AppId&lt;/a&gt; as an authentication provider instead of Dex. When using AppID, it delegates the identity provider to IBM Cloud with builtin identity providers (Cloud Directory, SAML, social log-in with Google or Facebook etc.) or custom providers. Additionally for securing the &lt;a href=&quot;https://www.kubeflow.org/docs/ibm/deploy/authentication/&quot;&gt;Kubeflow authentication with HTTPS we have provided integration instructions&lt;/a&gt; using the &lt;a href=&quot;https://cloud.ibm.com/docs/containers?topic=containers-loadbalancer-about&quot;&gt;IBM Cloud Network Load Balancer&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;platform-gcp&quot;&gt;Platform: GCP&lt;/h3&gt;

&lt;p&gt;Description: Better UX and reliability for installation and upgrade. Upgrade Cloud Config Connector in management cluster to latest.&lt;/p&gt;

&lt;h3 id=&quot;platform-azure&quot;&gt;Platform: Azure&lt;/h3&gt;

&lt;p&gt;Description: We added &lt;a href=&quot;https://www.kubeflow.org/docs/azure/authentication-oidc/&quot;&gt;instructions for deploying Kubeflow with multi-tenancy backed by Azure Active Directory&lt;/a&gt;. Additionally, we documented the &lt;a href=&quot;https://www.kubeflow.org/docs/azure/azuremysql/&quot;&gt;steps to replace the Metadata store with a managed Azure MySQL datatabase instance&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;platform-openshift&quot;&gt;Platform: OpenShift&lt;/h3&gt;

&lt;p&gt;Description: Our focus for this release was to create the OpenShift stack that can install Kubeflow components on OpenShift 4.x . We architected the stack so users can pick and choose components they would like to install by adding or removing kustomizeConfig entries in the kfdef. Components currently supported are istio, single user pipeline, Jupyter notebooks with a custom Tensorflow notebook image, profile controller with custom image, Katib, pytorch and Tensorflow job operators and Seldon. You can install Kubeflow 1.2 on Openshift from the &lt;a href=&quot;https://opendatahub.io/&quot;&gt;Open Data Hub&lt;/a&gt; community operator in OpenShift Catalog using the OpenShift &lt;a href=&quot;https://github.com/kubeflow/manifests/blob/master/kfdef/kfctl_openshift.v1.2.0.yaml&quot;&gt;kfdef&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;platform-microk8s&quot;&gt;Platform: MicroK8s&lt;/h3&gt;

&lt;p&gt;Description: Kubeflow is a built-in add-on to MicroK8s, and now includes Istio v1.5 as default.&lt;/p&gt;

&lt;h3 id=&quot;platform-minikf&quot;&gt;Platform: MiniKF&lt;/h3&gt;

&lt;p&gt;Description: MiniKF is currently testing with Kubeflow 1.2 and will provide an updated MiniKF version based after validation testing and documentation has completed.    Please find more information on MiniKF here: &lt;a href=&quot;https://www.arrikto.com/get-started/&quot;&gt;https://www.arrikto.com/get-started/&lt;/a&gt; . You can also find tutorials that will guide you through end-to-end data science examples here: &lt;a href=&quot;https://www.arrikto.com/tutorials&quot;&gt;https://www.arrikto.com/tutorials&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="release" /><category term="official" /><summary type="html">Special Message from Kubeflow Founders</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.kubeflow.org/images/logo.png" /><media:content medium="image" url="https://blog.kubeflow.org/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Record metadata on Kubeflow from Notebooks</title><link href="https://blog.kubeflow.org/jupyter/2020/10/01/lineage.html" rel="alternate" type="text/html" title="Record metadata on Kubeflow from Notebooks" /><published>2020-10-01T00:00:00-05:00</published><updated>2020-10-01T00:00:00-05:00</updated><id>https://blog.kubeflow.org/jupyter/2020/10/01/lineage</id><content type="html" xml:base="https://blog.kubeflow.org/jupyter/2020/10/01/lineage.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-10-01-lineage.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;Lineage-Tracking&quot;&gt;Lineage Tracking&lt;a class=&quot;anchor-link&quot; href=&quot;#Lineage-Tracking&quot;&gt; &lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;This blog post will first guide you through the metadata SDK API, to create a notebook and log several actions to the metadata DB. Afterwards, you will be able to navigate to the Kubeflow UI and the resulting lineage graph, which gives you a graphical representation of the dependencies between the objects you logged using the SDK.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Install-the-Kubeflow-metadata-library&quot;&gt;Install the &lt;em&gt;Kubeflow-metadata&lt;/em&gt; library&lt;a class=&quot;anchor-link&quot; href=&quot;#Install-the-Kubeflow-metadata-library&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;pip install kubeflow-metadata --user
&lt;span class=&quot;c1&quot;&gt;# Install other packages:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;pip install pandas --user
&lt;span class=&quot;c1&quot;&gt;# Then restart the Notebook kernel.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kubeflow.metadata&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered celltag_parameters&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;METADATA_STORE_HOST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;metadata-grpc-service.kubeflow&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# default DNS of Kubeflow Metadata gRPC serivce.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;METADATA_STORE_PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Create-a-new-Workspace-and-Run-in-a-workspace&quot;&gt;Create a new Workspace and Run in a workspace&lt;a class=&quot;anchor-link&quot; href=&quot;#Create-a-new-Workspace-and-Run-in-a-workspace&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A &lt;a href=&quot;https://github.com/kubeflow/metadata/blob/25b44da29213968a2c438d24aad3656cc86d0499/sdk/python/kubeflow/metadata/metadata.py#L92&quot;&gt;Workspace&lt;/a&gt; groups a set of pipelines or notebooks runs, and their related artifacts and executions&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubeflow/metadata/blob/25b44da29213968a2c438d24aad3656cc86d0499/sdk/python/kubeflow/metadata/metadata.py#L59&quot;&gt;Store&lt;/a&gt; is an object that provides a connection to the Metadata gRPC service&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://github.com/kubeflow/metadata/blob/25b44da29213968a2c438d24aad3656cc86d0499/sdk/python/kubeflow/metadata/metadata.py#L227&quot;&gt;Run&lt;/a&gt; object captures a pipeline or notebook run in a workspace&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ws1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Workspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Connect to metadata service in namespace kubeflow in k8s cluster.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpc_host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;METADATA_STORE_HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grpc_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;METADATA_STORE_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;xgboost-synthetic&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;workspace for xgboost-synthetic artifacts and executions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;n1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;v1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ws1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;xgboost-synthetic-faring-run&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utcnow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isoformat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;a notebook run&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Create-an-execution-in-a-run&quot;&gt;Create an execution in a run&lt;a class=&quot;anchor-link&quot; href=&quot;#Create-an-execution-in-a-run&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;An &lt;a href=&quot;https://github.com/kubeflow/metadata/blob/25b44da29213968a2c438d24aad3656cc86d0499/sdk/python/kubeflow/metadata/metadata.py#L251&quot;&gt;Execution&lt;/a&gt; is a specific instance of a run, and you can bind specific input/output artifacts to this instance. Execution also serves as object for logging artifacts as its input or output&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;execution&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utcnow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isoformat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ws1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;execution for training xgboost-synthetic&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;An execution was created with id &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;An execution was created with id 290
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Log-a-data-set-and-a-model&quot;&gt;Log a data set and a model&lt;a class=&quot;anchor-link&quot; href=&quot;#Log-a-data-set-and-a-model&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A &lt;a href=&quot;https://github.com/kubeflow/metadata/blob/25b44da29213968a2c438d24aad3656cc86d0499/sdk/python/kubeflow/metadata/metadata.py#L319&quot;&gt;Log_input&lt;/a&gt; log an artifact as an input of this execution. Here exec.log_input accept an artifact class as an argument, a &lt;a href=&quot;https://github.com/kubeflow/metadata/blob/25b44da29213968a2c438d24aad3656cc86d0499/sdk/python/kubeflow/metadata/metadata.py#L412&quot;&gt;DataSet&lt;/a&gt; is an artifact. Every artifacts has different paramenters such as name, uri, query. The way to create DataSet artifact is calling ready-to-use APIs metadata.DataSet and provide arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date_set_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;data_set_version_&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;xgboost synthetic data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;synthetic-data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;someone@kubeflow.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;file://path/to/dataset&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;v1.0.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;SELECT * FROM mytable&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Data set id is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{0.id}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; with version &amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{0.version}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Data set id is 171 with version &amp;#39;data_set_version_cbebc757-0d76-4e1e-bbd9-02b065e4c3ea&amp;#39;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href=&quot;https://github.com/kubeflow/metadata/blob/25b44da29213968a2c438d24aad3656cc86d0499/sdk/python/kubeflow/metadata/metadata.py#L337&quot;&gt;Log_output&lt;/a&gt; log an artifact as a output of this execution. Here exec.log_output accept an artifact class as an argument, a &lt;a href=&quot;https://github.com/kubeflow/metadata/blob/25b44da29213968a2c438d24aad3656cc86d0499/sdk/python/kubeflow/metadata/metadata.py#L518&quot;&gt;Model&lt;/a&gt; is an artifact. Every artifacts has different paramenters such as name, uri, hyperparameters. The way to create Model artifact is calling ready-to-use APIs metadata.Model and provide arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;model_version_&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;MNIST&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;model to recognize handwritten digits&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;someone@kubeflow.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;gcs://my-bucket/mnist&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;model_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;neural network&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;training_framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;tensorflow&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;v1.0&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hyperparameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;learning_rate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;layers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;early_stop&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mylabel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Model id is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{0.id}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; and version is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{0.version}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;kubeflow.metadata.metadata.Model(workspace=None, name=&amp;#39;MNIST&amp;#39;, description=&amp;#39;model to recognize handwritten digits&amp;#39;, owner=&amp;#39;someone@kubeflow.org&amp;#39;, uri=&amp;#39;gcs://my-bucket/mnist&amp;#39;, version=&amp;#39;model_version_50b419e2-af69-4c0e-a251-78246d4c0578&amp;#39;, model_type=&amp;#39;neural network&amp;#39;, training_framework={&amp;#39;name&amp;#39;: &amp;#39;tensorflow&amp;#39;, &amp;#39;version&amp;#39;: &amp;#39;v1.0&amp;#39;}, hyperparameters={&amp;#39;learning_rate&amp;#39;: 0.5, &amp;#39;layers&amp;#39;: [10, 3, 1], &amp;#39;early_stop&amp;#39;: True}, labels={&amp;#39;mylabel&amp;#39;: &amp;#39;l1&amp;#39;}, id=172, create_time=&amp;#39;2019-12-04T00:44:49.444411Z&amp;#39;, kwargs={})

Model id is 172 and version is model_version_50b419e2-af69-4c0e-a251-78246d4c0578
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Log-the-evaluation-of-a-model&quot;&gt;Log the evaluation of a model&lt;a class=&quot;anchor-link&quot; href=&quot;#Log-the-evaluation-of-a-model&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubeflow/metadata/blob/25b44da29213968a2c438d24aad3656cc86d0499/sdk/python/kubeflow/metadata/metadata.py#L639&quot;&gt;Metrics&lt;/a&gt; captures an evaluation metrics of a model on a data set&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metrics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;MNIST-evaluation&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;validating the MNIST model to recognize handwritten digits&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;someone@kubeflow.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;gcs://my-bucket/mnist-eval.csv&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data_set_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;model_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;metrics_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VALIDATION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;accuracy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mylabel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Metrics id is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Metrics id is 173
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Add-Metadata-for-serving-the-model&quot;&gt;Add Metadata for serving the model&lt;a class=&quot;anchor-link&quot; href=&quot;#Add-Metadata-for-serving-the-model&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serving_application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;serving model&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ws1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;an execution to represent model serving component&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Noticed we use model name, version, uri to uniquely identify existing model.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;served_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;MNIST&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;gcs://my-bucket/mnist&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serving_application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;served_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Found the mode with id &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{0.id}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; and version &amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{0.version}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#39;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Found the mode with id 172 and version &amp;#39;model_version_50b419e2-af69-4c0e-a251-78246d4c0578&amp;#39;.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;Plot-the-lineage-graph&quot;&gt;Plot the lineage graph&lt;a class=&quot;anchor-link&quot; href=&quot;#Plot-the-lineage-graph&quot;&gt; &lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/copied_from_nb/images-lineage/lineage.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The figure above shows an example of the lineage graph from our xgboost example. Follow below steps for you to try out:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Follow the guide to &lt;a href=&quot;https://www.kubeflow.org/docs/notebooks/setup/&quot;&gt;setting up your Jupyter notebooks in Kubeflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go back to your Jupyter notebook server in the Kubeflow UI. (If you’ve moved away from the notebooks section in Kubeflow, click Notebook Servers in the left-hand navigation panel to get back there.)&lt;/li&gt;
&lt;li&gt;In the Jupyter notebook UI, click Upload and follow the prompts to upload the &lt;a href=&quot;https://github.com/kubeflow/examples/blob/master/xgboost_synthetic/build-train-deploy.ipynb&quot;&gt;xgboost example&lt;/a&gt; notebook.&lt;/li&gt;
&lt;li&gt;Click the notebook name (build-train-deploy.ipynb.ipynb) to open the notebook in your Kubeflow cluster.&lt;/li&gt;
&lt;li&gt;Run the steps in the notebook to install and use the Metadata SDK.&lt;/li&gt;
&lt;li&gt;Click Artifact Store in the left-hand navigation panel on the Kubeflow UI.&lt;/li&gt;
&lt;li&gt;Select Pipelines -&amp;gt; Artifacts&lt;/li&gt;
&lt;li&gt;Navigate to xgboost-synthetic-traing-eval&lt;/li&gt;
&lt;li&gt;Click on Lineage explorer&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="jupyter" /><summary type="html"></summary></entry><entry><title type="html">Data Science Meets Devops: MLOps with Jupyter, Git, &amp;amp; Kubernetes</title><link href="https://blog.kubeflow.org/mlops/" rel="alternate" type="text/html" title="Data Science Meets Devops: MLOps with Jupyter, Git, &amp;amp; Kubernetes" /><published>2020-08-01T00:00:00-05:00</published><updated>2020-08-01T00:00:00-05:00</updated><id>https://blog.kubeflow.org/data-science-meets-devops</id><content type="html" xml:base="https://blog.kubeflow.org/mlops/">&lt;h1 id=&quot;the-problem&quot;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.kubeflow.org/&quot;&gt;Kubeflow&lt;/a&gt; is a fast-growing open source project that makes it easy to deploy and manage machine learning on Kubernetes.&lt;/p&gt;

&lt;p&gt;Due to Kubeflow’s explosive popularity, we receive a large influx of GitHub issues that must be triaged and routed to the appropriate subject matter expert.  The below chart illustrates the number of new issues opened for the past year:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-08-01-data-science-meets-devops/fig1.num-issues.png&quot; width=&quot;&quot; alt=&quot;Number of Kubeflow Issues&quot; title=&quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;&lt;strong&gt;Figure 1:&lt;/strong&gt; Number of Kubeflow Issues&lt;/figcaption&gt;

&lt;p&gt;To keep up with this influx, we started investing in a Github App called &lt;a href=&quot;https://github.com/marketplace/issue-label-bot&quot;&gt;Issue Label Bot&lt;/a&gt; that used machine learning to auto label issues.  Our &lt;a href=&quot;https://github.com/marketplace/issue-label-bot&quot;&gt;first model&lt;/a&gt; was trained using a collection of popular public repositories on GitHub and only predicted generic labels.  Subsequently, we started using &lt;a href=&quot;https://cloud.google.com/automl/docs&quot;&gt;Google AutoML&lt;/a&gt; to train a Kubeflow specific model. The new model was able to predict Kubeflow specific labels with average precision of 72% and average recall of 50%. This significantly reduced the toil associated with issue management for Kubeflow maintainers. The table below contains evaluation metrics for Kubeflow specific labels on a holdout set.  The &lt;a href=&quot;https://en.wikipedia.org/wiki/Precision_and_recall&quot;&gt;precision and recall&lt;/a&gt; below coincide with prediction thresholds that we calibrated to suit our needs.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Label&lt;/th&gt;
      &lt;th&gt;Precision&lt;/th&gt;
      &lt;th&gt;Recall&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;area-backend&lt;/td&gt;
      &lt;td&gt;0.6&lt;/td&gt;
      &lt;td&gt;0.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-bootstrap&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
      &lt;td&gt;0.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-centraldashboard&lt;/td&gt;
      &lt;td&gt;0.6&lt;/td&gt;
      &lt;td&gt;0.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-components&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-docs&lt;/td&gt;
      &lt;td&gt;0.8&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-engprod&lt;/td&gt;
      &lt;td&gt;0.8&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-front-end&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-frontend&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
      &lt;td&gt;0.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-inference&lt;/td&gt;
      &lt;td&gt;0.9&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-jupyter&lt;/td&gt;
      &lt;td&gt;0.9&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-katib&lt;/td&gt;
      &lt;td&gt;0.8&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-kfctl&lt;/td&gt;
      &lt;td&gt;0.8&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-kustomize&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
      &lt;td&gt;0.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-operator&lt;/td&gt;
      &lt;td&gt;0.8&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-pipelines&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
      &lt;td&gt;0.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-samples&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-sdk&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
      &lt;td&gt;0.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-sdk-dsl&lt;/td&gt;
      &lt;td&gt;0.6&lt;/td&gt;
      &lt;td&gt;0.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-sdk-dsl-compiler&lt;/td&gt;
      &lt;td&gt;0.6&lt;/td&gt;
      &lt;td&gt;0.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-testing&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;area-tfjob&lt;/td&gt;
      &lt;td&gt;0.4&lt;/td&gt;
      &lt;td&gt;0.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;platform-aws&lt;/td&gt;
      &lt;td&gt;0.8&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;platform-gcp&lt;/td&gt;
      &lt;td&gt;0.8&lt;/td&gt;
      &lt;td&gt;0.6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;figcaption&gt;&lt;strong&gt;Table 1:&lt;/strong&gt; Evaluation metrics for various Kubeflow labels.&lt;/figcaption&gt;

&lt;p&gt;Given the rate at which new issues are arriving, retraining our model periodically became a priority. We believe continuously retraining and deploying our model to leverage this new data is critical to maintaining the efficacy of our models.&lt;/p&gt;

&lt;h1 id=&quot;our-solution&quot;&gt;Our Solution&lt;/h1&gt;

&lt;p&gt;Our CI/CD solution is illustrated in &lt;a href=&quot;#fig2&quot;&gt;Figure 2&lt;/a&gt;. We don’t explicitly create a directed acyclic graph (DAG)  to connect the steps in an ML workflow (e.g. preprocessing, training, validation, deployment, etc…). Rather, we use a set of independent controllers. Each controller declaratively describes the desired state of the world and takes  actions necessary to make the actual state of the world match. This independence makes it easy for us to use whatever tools make the most sense for each step. More specifically we use&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jupyter notebooks for developing models.&lt;/li&gt;
  &lt;li&gt;GitOps for continuous integration and deployment.&lt;/li&gt;
  &lt;li&gt;Kubernetes and managed cloud services for underlying infrastructure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img id=&quot;fig2&quot; src=&quot;/images/2020-08-01-data-science-meets-devops/fig2.ci-cd.png&quot; width=&quot;&quot; alt=&quot;alt_text&quot; title=&quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;&lt;strong&gt;Figure 2:&lt;/strong&gt; illustrates how we do CI/CD. Our pipeline today consists of two independently operating controllers. We configure the Trainer (left hand side) by describing what models we want to exist; i.e. what it means for our models to be “fresh”.  The Trainer periodically checks whether the set of trained models are sufficiently fresh and if not trains a new model. We likewise configure the Deployer (right hand side) to define what it means for the deployed model to be in sync with the set of trained models. If the correct model is not deployed it will deploy a new model.&lt;/figcaption&gt;

&lt;p&gt;For more details on model training and deployment refer to the &lt;a href=&quot;#actuation&quot;&gt;Actuation section below&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;h2 id=&quot;building-resilient-systems-with-reconcilers&quot;&gt;Building Resilient Systems With Reconcilers&lt;/h2&gt;

&lt;p&gt;A reconciler is a control pattern that has proven to be immensely useful for building resilient systems. The reconcile pattern is &lt;a href=&quot;https://book.kubebuilder.io/cronjob-tutorial/controller-overview.html&quot;&gt;at the heart of how Kubernetes works&lt;/a&gt;. Figure 3 illustrates how a reconciler works. A reconciler works by first observing the state of the world; e.g. what model is currently deployed. The reconciler then compares this against the desired state of the world and computes the diff; e.g the model with label “version=20200724” should be deployed, but the model currently deployed has label “version=20200700”. The reconciler then takes the action necessary to drive the world to the desired state; e.g. open a pull request to change the deployed model.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-08-01-data-science-meets-devops/fig3.reconciler.png&quot; width=&quot;&quot; alt=&quot;Figure 3&quot; title=&quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;&lt;strong&gt;Figure 3.&lt;/strong&gt; Illustration of the reconciler pattern as applied by our deployer.&lt;/figcaption&gt;

&lt;p&gt;Reconcilers have proven immensely useful for building resilient systems because a well implemented reconciler provides a high degree of confidence that no matter how a system is perturbed it will eventually return to the desired state.&lt;/p&gt;

&lt;h2 id=&quot;there-is-no-dag&quot;&gt;There is no DAG&lt;/h2&gt;

&lt;p&gt;The declarative nature of controllers means data can flow through a series of controllers  without needing to explicitly create a DAG. In lieu of a DAG, a series of data processing steps can instead be expressed as a set of desired states, as illustrated in Figure 4 below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-08-01-data-science-meets-devops/fig4.data-pipeline.png&quot; width=&quot;&quot; alt=&quot;alt_text&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figcaption&gt;&lt;strong&gt;Figure 4:&lt;/strong&gt; illustrates how pipelines can emerge from independent controllers without explicitly encoding a DAG. Here we have two completely independent controllers. The first controller ensures that for every element a&lt;sub&gt;i&lt;/sub&gt; there should be an element b&lt;sub&gt;i&lt;/sub&gt;. The second controller ensures that for every element b&lt;sub&gt;i&lt;/sub&gt; there should be an element c&lt;sub&gt;i&lt;/sub&gt;.&lt;/figcaption&gt;

&lt;p&gt;This reconciler-based paradigm offers the following benefits over many traditional DAG-based workflows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Resilience against failures&lt;/strong&gt;:  the system continuously seeks to achieve and maintain the desired state.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Increased autonomy of engineering teams:&lt;/strong&gt; each team is free to choose the tools and infrastructure that suit their needs.  The reconciler framework only requires a minimal amount of coupling between controllers while still allowing one to write expressive workflows.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Battle tested patterns and tools&lt;/strong&gt;:  This reconciler based framework does not invent something new.  Kubernetes has a rich ecosystem of tools that aim to make it easy to build controllers. The popularity of Kubernetes means there is a large and growing community familiar with this pattern and supporting tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gitops-operation-by-pull-request&quot;&gt;GitOps: Operation By Pull Request&lt;/h2&gt;

&lt;p&gt;GitOps, Figure 5, is a pattern for managing infrastructure. The core idea of GitOps is that source control (doesn’t have to be git) should be the source of truth for configuration files  describing your infrastructure. Controllers can then monitor source control and automatically update your infrastructure as your config changes. This means to make a change (or undo a change) you just open a pull request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-08-01-data-science-meets-devops/fig5.gitops.png&quot; width=&quot;&quot; alt=&quot;alt_text&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figcaption&gt;&lt;strong&gt;Figure 5:&lt;/strong&gt; To push a new model for Label Bot we create a PR updating the config map storing the id of the Auto ML model we want to use. When the PR is merged, &lt;a href=&quot;https://cloud.google.com/anthos-config-management/docs&quot;&gt;Anthos Config Management(ACM&lt;/a&gt;) automatically rolls out those changes to our GKE cluster. As a result, subsequent predictions are made using the new model. (Image courtesy of &lt;a href=&quot;https://www.weave.works/blog/automate-kubernetes-with-gitops&quot;&gt;Weaveworks&lt;/a&gt;)&lt;/figcaption&gt;

&lt;h1 id=&quot;putting-it-together-reconciler--gitops--cicd-for-ml&quot;&gt;Putting It Together: Reconciler + GitOps = CI/CD for ML&lt;/h1&gt;

&lt;p&gt;With that background out of the way, let’s dive into how we built CI/CD for ML by combining the Reconciler and GitOps patterns.&lt;/p&gt;

&lt;p&gt;There were three problems we needed to solve:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How do we compute the diff between the desired and actual state of the world?&lt;/li&gt;
  &lt;li&gt;How do we affect the changes needed to make the actual state match the desired state?&lt;/li&gt;
  &lt;li&gt;How do we build a control loop to continuously run 1 &amp;amp; 2?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;computing-diffs&quot;&gt;Computing Diffs&lt;/h2&gt;

&lt;p&gt;To compute the diffs we just write lambdas that do exactly what we want. So in this case we wrote two lambdas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;a href=&quot;https://github.com/kubeflow/code-intelligence/blob/faeb65757214ac93259f417b81e9e2fedafaebda/Label_Microservice/go/cmd/automl/pkg/server/server.go#L109&quot;&gt;first lambda&lt;/a&gt; determines whether we need to retrain based on the age of the most recent model.&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://github.com/kubeflow/code-intelligence/blob/faeb65757214ac93259f417b81e9e2fedafaebda/Label_Microservice/go/cmd/automl/pkg/server/server.go#L49&quot;&gt;second lambda&lt;/a&gt; determines whether the model needs to be updated by comparing the most recently trained model to the model listed in a config map checked into source control.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We wrap these lambdas in a simple web server and deploy on Kubernetes. One reason we chose this approach is because we wanted to rely on Kubernetes’ &lt;a href=&quot;https://github.com/kubernetes/git-sync&quot;&gt;git-sync&lt;/a&gt; to mirror our repository to a pod volume. This makes our lambdas super simple because all the git management is taken care of by a side-car running &lt;a href=&quot;https://github.com/kubernetes/git-sync&quot;&gt;git-sync&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;actuation&quot;&gt;Actuation&lt;/h2&gt;

&lt;p&gt;To apply the changes necessary, we use Tekton to glue together various CLIs that we use to perform the various steps.&lt;/p&gt;

&lt;h3 id=&quot;model-training&quot;&gt;Model Training&lt;/h3&gt;

&lt;p&gt;To train our model we have a &lt;a href=&quot;https://github.com/kubeflow/code-intelligence/blob/faeb65757214ac93259f417b81e9e2fedafaebda/tekton/tasks/run-notebook-task.yaml#L34&quot;&gt;Tekton task &lt;/a&gt; that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Runs our notebook using &lt;a href=&quot;https://github.com/nteract/papermill&quot;&gt;papermill&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Converts the notebook to html using &lt;a href=&quot;https://nbconvert.readthedocs.io/en/latest/&quot;&gt;nbconvert&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Uploads the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ipynb&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt; files to GCS using &lt;a href=&quot;https://cloud.google.com/storage/docs/gsutil&quot;&gt;gsutil&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This notebook fetches GitHub Issues data &lt;a href=&quot;https://medium.com/google-cloud/analyzing-github-issues-and-comments-with-bigquery-c41410d3308&quot;&gt;from BigQuery&lt;/a&gt; and generates CSV files on GCS suitable for import into &lt;a href=&quot;https://cloud.google.com/automl&quot;&gt;Google AutoML&lt;/a&gt;. The notebook then launches an &lt;a href=&quot;https://cloud.google.com/automl&quot;&gt;AutoML&lt;/a&gt; job to train a model.&lt;/p&gt;

&lt;p&gt;We chose AutoML because we wanted to focus on building a complete end to end solution rather than iterating on the model. AutoML provides a competitive baseline that we may try to improve upon in the future.&lt;/p&gt;

&lt;p&gt;To easily view the executed notebook we convert it to html and upload it to &lt;a href=&quot;https://cloud.google.com/storage/docs/hosting-static-website&quot;&gt;GCS which makes it easy to serve public, static content&lt;/a&gt;. This allows us to use notebooks to generate rich visualizations to evaluate our model.&lt;/p&gt;

&lt;h3 id=&quot;model-deployment&quot;&gt;Model Deployment&lt;/h3&gt;

&lt;p&gt;To deploy our model we have a &lt;a href=&quot;https://github.com/kubeflow/code-intelligence/blob/faeb65757214ac93259f417b81e9e2fedafaebda/tekton/tasks/update-model-pr-task.yaml#L68&quot;&gt;Tekton task&lt;/a&gt; that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Uses kpt to update our configmap with the desired value.&lt;/li&gt;
  &lt;li&gt;Runs git to push our changes to a branch.&lt;/li&gt;
  &lt;li&gt;Uses a wrapper around the &lt;a href=&quot;https://github.com/cli/cli&quot;&gt;GitHub CLI&lt;/a&gt; (gh) to create a PR.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The controller ensures there is only one Tekton pipeline running at a time. We configure our pipelines to always push to the same branch. This ensures we only ever open one PR to update the model because GitHub doesn’t allow multiple PRs to be created from the same branch.&lt;/p&gt;

&lt;p&gt;Once the PR is merged &lt;a href=&quot;https://cloud.google.com/anthos/config-management&quot;&gt;Anthos Config Mesh&lt;/a&gt; automatically applies the Kubernetes manifests to our Kubernetes cluster.&lt;/p&gt;

&lt;h3 id=&quot;why-tekton&quot;&gt;Why Tekton&lt;/h3&gt;

&lt;p&gt;We picked Tekton because the primary challenge we faced was sequentially running a series of CLIs in various containers. Tekton is perfect for this. Importantly, all the steps in a Tekton task run on the same pod which allows data to be shared between steps using a pod volume.&lt;/p&gt;

&lt;p&gt;Furthermore, since Tekton resources are Kubernetes resources we can adopt the same GitOps pattern and tooling to 
update our pipeline definitions.&lt;/p&gt;

&lt;h2 id=&quot;the-control-loop&quot;&gt;The Control Loop&lt;/h2&gt;

&lt;p&gt;Finally, we needed to build a control loop that would periodically invoke our lambdas and launch our Tekton pipelines as needed. We used kubebuilder to create a &lt;a href=&quot;https://github.com/kubeflow/code-intelligence/tree/master/Label_Microservice/go&quot;&gt;simple custom controller&lt;/a&gt;. Our controller’s reconcile loop will call our lambda to determines whether a sync is needed and if so with what parameters. If a sync is needed the controller fires off a Tekton pipeline to perform the actual update. An example of our &lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&quot;&gt;custom resource&lt;/a&gt; is illustrated below:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;automl.cloudai.kubeflow.org/v1alpha1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ModelSync&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;modelsync-sample&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;label-bot-prod&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;failedPipelineRunsHistoryLimit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;needsSyncUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://labelbot-diff.label-bot-prod/needsSync&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;needsSyncName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pipelineName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;automl-model&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pipelineRunTemplate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;automl-model&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;notavlidmodel&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;branchName&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;auto-update&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fork&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git@github.com:kubeflow/code-intelligence.git&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;forkName&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fork&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;pipelineRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;update-model-pr&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;repo&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;resourceSpec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/kubeflow/code-intelligence.git&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;revision&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;serviceAccountName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;auto-update&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;successfulPipelineRunsHistoryLimit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The custom resource specifies the endpoint, &lt;strong&gt;needsSyncUrl&lt;/strong&gt;, for the lambda that computes whether a sync is needed and a Tekton PipelineRun, &lt;strong&gt;pipelineRunTemplate&lt;/strong&gt;, describing the pipeline run to create when a sync is needed. The controller takes care of the details; e.g. ensuring only 1 pipeline per resource is running at a time, garbage collecting old runs, etc… All of the heavy lifting is taken care of for us by Kubernetes and kubebuilder.&lt;/p&gt;

&lt;p&gt;Note, for historical reasons the kind, &lt;strong&gt;ModelSync&lt;/strong&gt;, and apiVersion &lt;strong&gt;automl.cloudai.kubeflow.org&lt;/strong&gt; are not reflective of what the controller actually does. We plan on fixing this in the future.&lt;/p&gt;

&lt;h1 id=&quot;build-your-own-cicd-pipelines&quot;&gt;Build Your Own CI/CD pipelines&lt;/h1&gt;

&lt;p&gt;Our code base is a long way from being polished, easily reusable tooling. Nonetheless it is all public  and could be a useful starting point for trying to build your own pipelines.&lt;/p&gt;

&lt;p&gt;Here are some pointers to get you started:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use the Dockerfile to build your own &lt;a href=&quot;https://github.com/kubeflow/code-intelligence/blob/master/Label_Microservice/go/Dockerfile&quot;&gt;ModelSync controller&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kubeflow/code-intelligence/tree/master/Label_Microservice/go/config/default&quot;&gt;Modify the kustomize package&lt;/a&gt; to use your image and deploy the controller&lt;/li&gt;
  &lt;li&gt;Define one or more lambdas as needed for your use cases
    &lt;ul&gt;
      &lt;li&gt;You can use our &lt;a href=&quot;https://github.com/kubeflow/code-intelligence/blob/master/Label_Microservice/go/cmd/automl/pkg/server/server.go&quot;&gt;Lambda server&lt;/a&gt; as an example&lt;/li&gt;
      &lt;li&gt;We wrote ours in go but you can use any language and web framework you like (e.g. flask)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Define Tekton pipelines suitable for your use cases; our pipelines(linked below) might be a useful starting point
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/kubeflow/code-intelligence/blob/master/tekton/tasks/run-notebook-task.yaml&quot;&gt;Notebook Tekton task &lt;/a&gt; - Run notebook with papermill and upload to GCS&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/kubeflow/code-intelligence/blob/master/tekton/tasks/update-model-pr-task.yaml&quot;&gt;PR Tekton Task&lt;/a&gt; - Tekton task to open GitHub PRs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Define ModelSync resources for your use case; you can refer to ours as an example
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/kubeflow/code-intelligence/blob/master/Label_Microservice/auto-update/prod/modelsync.yaml&quot;&gt;ModelSync Deploy Spec&lt;/a&gt; - YAML to continuously deploy label bot&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/kubeflow/code-intelligence/blob/master/Label_Microservice/auto-update/prod/retrain-model.yaml&quot;&gt;ModelSync Train Spec&lt;/a&gt; - YAML to continuously train our model&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you’d like to see us clean it up and include it in a future Kubeflow release please chime in on issue &lt;a href=&quot;https://github.com/kubeflow/kubeflow/issues/5167&quot;&gt;kubeflow/kubeflow#5167&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h1&gt;

&lt;h2 id=&quot;lineage-tracking&quot;&gt;Lineage Tracking&lt;/h2&gt;

&lt;p&gt;Since we do not have an explicit DAG representing the sequence of steps in our CI/CD pipeline understanding the lineage of our models can be challenging. Fortunately, Kubeflow Metadata solves this by making it easy for each step to record information about what outputs it produced using what code and inputs. Kubeflow metadata can easily recover and plot the lineage graph. The figure below shows an example of the lineage graph from our &lt;a href=&quot;https://github.com/kubeflow/examples/blob/master/xgboost_synthetic/build-train-deploy.ipynb&quot;&gt;xgboost example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-08-01-data-science-meets-devops/fig6.lineage.png&quot; alt=&quot;alt_text&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figcaption&gt;&lt;strong&gt;Figure 6:&lt;/strong&gt; screenshot of the lineage tracking UI for our &lt;a href=&quot;https://github.com/kubeflow/examples/blob/master/xgboost_synthetic/build-train-deploy.ipynb&quot;&gt;xgboost example&lt;/a&gt;.&lt;/figcaption&gt;

&lt;p&gt;Our plan is to have our controller automatically write lineage tracking information to the metadata server so we can easily understand the lineage of what’s in production.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-08-01-data-science-meets-devops/meme.png&quot; width=&quot;&quot; alt=&quot;alt_text&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Building ML products is a team effort. In order to move a model from a proof of concept to a shipped product, data scientists and devops engineers need to collaborate. To foster this collaboration, we believe it is important to allow data scientists and devops engineers to use their preferred tools.    Concretely, we wanted to support the following tools for Data Scientists, Devops Engineers, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Site_Reliability_Engineering&quot;&gt;SRE&lt;/a&gt;s:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jupyter notebooks for developing models.&lt;/li&gt;
  &lt;li&gt;GitOps for continuous integration and deployment.&lt;/li&gt;
  &lt;li&gt;Kubernetes and managed cloud services for underlying infrastructure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To maximize each team’s autonomy and reduce dependencies on tools, our  CI/CD process follows a decentralized approach. Rather than explicitly define a DAG that connects the steps, our approach relies on a series of controllers that can be defined and administered independently. We think this maps naturally to enterprises where responsibilities might be split across teams; a data engineering team might be responsible for turning weblogs into features, a modeling team might be responsible for producing models from the features, and a deployments team might be responsible for rolling those models into production.&lt;/p&gt;

&lt;h1 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h1&gt;

&lt;p&gt;If you’d like to learn more about GitOps we suggest this &lt;a href=&quot;https://www.weave.works/technologies/gitops/&quot;&gt;guide&lt;/a&gt; from Weaveworks.&lt;/p&gt;

&lt;p&gt;To learn how to build your own Kubernetes controllers the &lt;a href=&quot;https://book.kubebuilder.io/&quot;&gt;kubebuilder book&lt;/a&gt; walks through an E2E example.&lt;/p&gt;</content><author><name>&lt;a href='https://www.linkedin.com/in/jeremy-lewi-600aaa8/'&gt;Jeremy Lewi&lt;/a&gt;, &lt;a href='https://hamel.dev/'&gt;Hamel Husain&lt;/a&gt;</name></author><category term="jupyter" /><category term="mlops" /><category term="tekton" /><category term="gitops" /><summary type="html">The Problem</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.kubeflow.org/images/2020-08-01-data-science-meets-devops/meme.png" /><media:content medium="image" url="https://blog.kubeflow.org/images/2020-08-01-data-science-meets-devops/meme.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Kubeflow 1.1 improves ML Workflow Productivity, Isolation &amp;amp; Security, and GitOps</title><link href="https://blog.kubeflow.org/release/official/2020/07/31/kubeflow-1.1-blog-post.html" rel="alternate" type="text/html" title="Kubeflow 1.1 improves ML Workflow Productivity, Isolation &amp;amp; Security, and GitOps" /><published>2020-07-31T00:00:00-05:00</published><updated>2020-07-31T00:00:00-05:00</updated><id>https://blog.kubeflow.org/release/official/2020/07/31/kubeflow-1.1-blog-post</id><content type="html" xml:base="https://blog.kubeflow.org/release/official/2020/07/31/kubeflow-1.1-blog-post.html">&lt;p&gt;The Kubeflow Community’s delivery of Kubeflow 1.1 offers users valuable ML workflow automation with Fairing and Kale along with MXNet and XGBoost distributed training operators. It extends isolation and security through the delivery of multi-user pipelines, CVE scanning, and support for Google’s Private GKE and Anthos. 1.1 also improves Katib’s hyperparameter tuning features by offering new frameworks &amp;amp; algorithms, and enables flexible configuration &amp;amp; tuning options. 1.1 provides a foundation for consistent and repeatable installation and operations using GitOps methodologies powered by blueprints and kpt primitives.&lt;/p&gt;

&lt;p&gt;The ML productivity enhancements in 1.1 include end-to-end workflows using Fairing and Kale. The Fairing workflow enables users to build, train and deploy models from a notebook and &lt;a href=&quot;https://github.com/kubeflow/fairing/releases/tag/v1.0.1&quot;&gt;Fairing improvements&lt;/a&gt; include the support of configuring environment variables and mounting secrets. Fairing also added a config map for a deployer and bug fixes for TensorRTSpec. The workflows enabled by &lt;a href=&quot;https://github.com/kubeflow-kale/kale&quot;&gt;Kale&lt;/a&gt; include the ability to write model code in a notebook and then automatically build a Kubeflow pipeline that deploys, trains and tunes that model efficiently, using Katib and cached pipeline steps. Kubeflow 1.1 also delivers stable release deliveries of &lt;a href=&quot;https://github.com/kubeflow/common/issues/97&quot;&gt;MXNet and XGBoost operators&lt;/a&gt;, which simplify distributed training on multiple nodes and speeds model creation.&lt;/p&gt;

&lt;p&gt;The isolation and security feature deliveries include Private GKE and Anthos support, a stable version of Kubeflow Pipelines with &lt;a href=&quot;https://www.kubeflow.org/docs/pipelines/multi-user/&quot;&gt;Multi-User Kubeflow Pipelines&lt;/a&gt; support, and a process for Kubeflow container image scanning, &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1ijWIyjGQpDy68-vjBmLyFY0U1oGCT--A0nVGgzLGDhU/edit#gid=0&quot;&gt;CVE reporting&lt;/a&gt;, and an optional process for distroless image creation. 1.1 also includes &lt;a href=&quot;https://github.com/kubeflow/kubeflow/issues/4960&quot;&gt;options for authentication and authorization&lt;/a&gt;. This includes the option for administrators to turn off self-service namespace creation mode, as admins may have other processes for namespace creation. The Community also developed a best practice to build user authorization in Kubeflow web apps using subject access review.&lt;/p&gt;

&lt;p&gt;The 1.1 Katib improvements deliver new frameworks &amp;amp; algorithms, and flexible configuration &amp;amp; tuning options.  The new frameworks &amp;amp; algorithms include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Integrate goptuna framework with (CMA-ES) Covariance Matrix Adaptation Evolution Strategy algorithm.&lt;/li&gt;
  &lt;li&gt;DARTS (Differentiable Architecture Search) algorithm implementation.&lt;/li&gt;
  &lt;li&gt;Better support for HP frameworks (chocolate, hyperopt, skopt).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Katib also adds these flexible configuration &amp;amp; tuning options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Implements a python SDK to run Katib experiments from Kubeflow notebooks.&lt;/li&gt;
  &lt;li&gt;Enables users to run experiments without the goal defined.&lt;/li&gt;
  &lt;li&gt;Provides a new trial template UI editor.&lt;/li&gt;
  &lt;li&gt;Enables users to view experiment and suggestion status in the UI, during the experiment run.&lt;/li&gt;
  &lt;li&gt;Adds a resume policy for experiments to clean-up suggestion resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The installation and operations of Kubeflow have been enhanced to support GitOps methodologies. Several Kubeflow platform providers and software support vendors are developing time-saving GitOps processes to simplify and codify the installation, configuration and operations of the various layers in the Kubeflow 1.1 hardware and software stack. Some examples are provided in the next section.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More details and 1.1 tutorials&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kubeflow 1.1 includes many technical enhancements, which are being delivered via the Community’s release process. Details on the application feature development can be found in the &lt;a href=&quot;https://github.com/orgs/kubeflow/projects/26&quot;&gt;1.1 KanBan Board&lt;/a&gt; and in the &lt;a href=&quot;https://github.com/kubeflow/kubeflow/blob/master/ROADMAP.md&quot;&gt;Kubeflow Roadmap&lt;/a&gt;. As the Kubeflow application improvements are merged, the platform teams (GCP, AWS, IBM, Red Hat, Azure, and Arrikto MiniKF) are working to validate the feature improvements on their respective environments.&lt;/p&gt;

&lt;p&gt;Kubeflow 1.1 includes KFServing v0.3, where the focus has been on providing more stability by doing a major move to KNative v1 APIs. Additionally, we added GPU support for PyTorch model servers, and pickled model format support for SKLearn. There were other enhancements vis a vis routing, payload logging, bug fixes etc., details of which can be found &lt;a href=&quot;https://github.com/kubeflow/kfserving/releases/tag/v0.3.0&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kubeflow 1.1 demo scripts and workflow tutorials are available as validated by the individual platforms. Please find those below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.arrikto.com/model-experimentation/build-an-end-to-end-ml-workflow-from-notebook-to-hp-tuning-to-kubeflow-pipelines-with-kale/&quot;&gt;Kubeflow 1.1 Tutorial for Automated Hyperparameter Tuning, Multi-user Pipelines, Pipeline Caching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.arrikto.com/integrations/kubeflow.html&quot;&gt;GitOps for Kubeflow 1.1 on AWS EKS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.1 users can also leverage several other Kubeflow ecosystem tools including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.seldon.io/projects/seldon-core/en/v1.2.1_a/&quot;&gt;Seldon Core 1.1&lt;/a&gt;, which handles scaling to thousands of production ML models and provides advanced ML capabilities including Advanced Metrics, Request Logging, Explainers, Outlier Detectors, A/B Tests, Canaries and more.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://feast.dev/&quot;&gt;Feast&lt;/a&gt;: A feature store that allows teams ML teams to define, manage, discover, and serve ML features to their models.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What’s Coming and Getting involved&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Kubeflow Community has started planning for its next release. Although we have a nice backlog of issues, our process includes discussions and surveys with users and contributors to validate use cases and their value.&lt;/p&gt;

&lt;p&gt;The Community continues to refine its governance and refine this proposal, &lt;a href=&quot;https://bit.ly/kf-governance&quot;&gt;Proposal for Kubeflow WG Guidelines/Governance&lt;/a&gt;. We are actively developing Working Group team charters, tech leads, chairs and members. We look forward to this growth.&lt;/p&gt;

&lt;p&gt;The following provides some helpful links to those looking to get involved with the Kubeflow Community:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Join the &lt;a href=&quot;https://app.slack.com/client/T7QLHSH6U/C7REE0EHK/thread/C7REE0EHK-1554222405.030500&quot;&gt;Kubeflow Slack channel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Join the &lt;a href=&quot;https://groups.google.com/g/kubeflow-discuss&quot;&gt;kubeflow-discuss mailing list&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Attend a &lt;a href=&quot;https://github.com/kubeflow/community&quot;&gt;weekly community meeting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have questions, run into issues, please leverage the Slack channel and/or submit bugs via &lt;a href=&quot;https://github.com/kubeflow&quot;&gt;Kubeflow on GitHub&lt;/a&gt;. Thanks from all of us in the Community, and we look forward to your success with Kubeflow 1.1.&lt;/p&gt;

&lt;p&gt;Special thanks to Yuan Tang (Ant Group), Josh Bottum (Arrikto), Constantinos Venetsanopoulos (Arrikto), Yannis Zarkadas (Arrikto), Jiaxin Shan (AWS), Dan Sun (Bloomberg), Andrey Velichkevich (Cisco), Krishna Durai (Cisco), Hamel Husain (GitHub), Willem Pienaar (GoJek), Yuan Gong (Google), Jeremy Lewi (Google), Animesh Singh (IBM) and Clive Cox (Seldon) for their help on this post.&lt;/p&gt;</content><author><name></name></author><category term="release" /><category term="official" /><summary type="html">The Kubeflow Community’s delivery of Kubeflow 1.1 offers users valuable ML workflow automation with Fairing and Kale along with MXNet and XGBoost distributed training operators. It extends isolation and security through the delivery of multi-user pipelines, CVE scanning, and support for Google’s Private GKE and Anthos. 1.1 also improves Katib’s hyperparameter tuning features by offering new frameworks &amp;amp; algorithms, and enables flexible configuration &amp;amp; tuning options. 1.1 provides a foundation for consistent and repeatable installation and operations using GitOps methodologies powered by blueprints and kpt primitives.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.kubeflow.org/images/logo.png" /><media:content medium="image" url="https://blog.kubeflow.org/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Kubeflow &amp;amp; Kale simplify building better ML Pipelines with automatic hyperparameter tuning</title><link href="https://blog.kubeflow.org/integrations/2020/07/10/kubeflow-kale.html" rel="alternate" type="text/html" title="Kubeflow &amp;amp; Kale simplify building better ML Pipelines with automatic hyperparameter tuning" /><published>2020-07-10T00:00:00-05:00</published><updated>2020-07-10T00:00:00-05:00</updated><id>https://blog.kubeflow.org/integrations/2020/07/10/kubeflow-kale</id><content type="html" xml:base="https://blog.kubeflow.org/integrations/2020/07/10/kubeflow-kale.html">&lt;p&gt;Running pipelines at scale has never been easier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2880/0*FJeDeyRWItzxlvXQ&quot; alt=&quot;Kubeflow’s Kale is maturing and fast becoming the superfood that glues together the main Kubeflow components to provide a cohesive and seamless data science experience.&quot; /&gt;&lt;em&gt;Kubeflow’s Kale is maturing and fast becoming the superfood that glues together the main Kubeflow components to provide a cohesive and seamless data science experience.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TL;DR: Convert Notebook to Kubeflow Pipelines, run them as hyperparameter tuning experiments, track executions and artifacts with MLMD, cache and maintain an immutable history of executions: Kale brings all of this on the table in a unified workflow tool, simple to use.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;running-pipelines-at-scale-has-never-been-easier&quot;&gt;Running pipelines at scale has never been easier&lt;/h3&gt;

&lt;p&gt;Kubeflow’s Kale is maturing and fast becoming the superfood that glues together the main Kubeflow components to provide a cohesive and seamless data science experience. With its &lt;a href=&quot;https://github.com/kubeflow-kale/kale/releases/tag/v0.5.0&quot;&gt;newest release&lt;/a&gt;, Kale provides an end-to-end workflow that encompasses Jupyter Notebooks, Kubeflow Pipelines, hyperparameter tuning with Katib, metadata tracking with ML Metadata (MLMD), and faster pipeline executions with caching.&lt;/p&gt;

&lt;p&gt;If you are new to Kale, head over to this &lt;a href=&quot;https://medium.com/kubeflow/automating-jupyter-notebook-deployments-to-kubeflow-pipelines-with-kale-a4ede38bea1f&quot;&gt;short introduction&lt;/a&gt; to get started!&lt;/p&gt;

&lt;p&gt;In this blog post, you will learn about the features that Kale is bringing to the Machine Learning community with version 0.5, and learn how to get started with a curated example.&lt;/p&gt;

&lt;h2 id=&quot;new-face&quot;&gt;New Face&lt;/h2&gt;

&lt;p&gt;First off, we are excited to reveal the new Kale logo. Kudos to Konstantinos Palaiologos (Arrikto) for designing the brand new, modern Kale leaf. This will be the new face of the project from now on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2880/0*r_FtjDyHMT5xkAra&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;hyperparameter-tuning&quot;&gt;Hyperparameter Tuning&lt;/h2&gt;

&lt;p&gt;The major new addition in v0.5 is the support for running pipelines with&lt;a href=&quot;https://www.kubeflow.org/docs/components/hyperparameter-tuning/&quot;&gt; Katib&lt;/a&gt;. Katib is Kubeflow’s component to run general purpose hyperparameter tuning jobs. Just as you would press a single button to convert a notebook to a pipeline, you can now press a button and let Kale start a hyperparameter Job on that pipeline. All you need to do is tell Kale what the HP tuning job should search for.&lt;/p&gt;

&lt;p&gt;Running hyperparameter tuning jobs gives you a dramatic boost in delivering good results for your project. The *manual *tuning process of running your model countless times, using different parameters combinations, aggregating them and comparing them, is error-prone and inefficient. Delegating this work to an automated process allows you to become faster, more efficient and accurate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/0*LFgPeIs7oMO0AQCz&quot; alt=&quot;Parametrize the HP tuning Job directly from the notebook&quot; /&gt;&lt;em&gt;Parametrize the HP tuning Job directly from the notebook&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Katib does not know anything about the jobs that it is actually running (called Trials in the Katib jargon). Katib supports running Trials as simple Jobs (that is, Pods), BatchJobs, &lt;a href=&quot;https://www.kubeflow.org/docs/components/training/tftraining/&quot;&gt;TFJobs&lt;/a&gt;, and &lt;a href=&quot;https://www.kubeflow.org/docs/components/training/pytorch/&quot;&gt;PyTorchJobs&lt;/a&gt;. Kale 0.5 integrates Katib with Kubeflow Pipelines. This enables Katib trails to run as pipelines in KFP. The metrics from the pipeline runs are provided to help in model performance analysis and debugging. All Kale needs to know from the user is the search space, the optimization algorithm, and the search goal.&lt;/p&gt;

&lt;p&gt;Kale will also make sure that all the runs of a Katib experiment, end up unified and grouped, under a single KFP experiment, to make it easy to search and isolate a particular job.&lt;/p&gt;

&lt;p&gt;Kale will also show a &lt;strong&gt;live view&lt;/strong&gt; of the running experiments, directly in the notebook, so you will know how many pipelines are still running and, upon completion, which one performed best.&lt;/p&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New features&lt;/h2&gt;

&lt;h3 id=&quot;pipeline-parameters-and-metrics&quot;&gt;Pipeline parameters and metrics&lt;/h3&gt;

&lt;p&gt;In order to run pipelines with hyperparameter tuning, the pipeline needs to be able to accept arguments and produce metrics. Enabling the pipeline to do this, is now tremendously easy. Kale provides two new cell tags: pipeline-parameters and pipeline-metrics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/0*3Tix4kBJyfgy1YtG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Assigning the pipeline-parameters tag on any cell that contains some variables will instruct Kale to transform them to pipeline parameters. These values will then be passed to the pipeline steps that actually make use of them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/0*dtzxRAyAzLRlxQij&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want the pipeline to produce some metrics, just print them at the end of the notebook and assign the pipeline-metrics tag to the cell. Kale will take care of understanding which steps produce the metrics and you will see them appear in the KFP dashboard.&lt;/p&gt;

&lt;h3 id=&quot;rich-notebook-outputs&quot;&gt;Rich notebook outputs&lt;/h3&gt;

&lt;p&gt;Having your pipelines produce rich outputs (like plots, tables, metrics, …) that can be captured and displayed by the Kubeflow Pipelines dashboard has always been somewhat cumbersome. You would need to write some KFP-specific code to produce json artifacts that would then be interpreted by KFP.&lt;/p&gt;

&lt;p&gt;What if you could just write plain Python in your Notebook using your favourite plotting library, and have the plots auto-magically appear as KFP outputs, when the Notebook gets compiled into a pipeline?&lt;/p&gt;

&lt;p&gt;Now, when running your notebook code inside a pipeline step, Kale will wrap it and feed it to an ipython kernel, so that all the nice artifacts produced in the notebook, will be produced in the pipeline as well. Kale will capture all these rich outputs automatically and instruct KFP to display them in the dashboard. Effectively, whatever happens in the notebook, now happens in the pipeline as well. The execution context is &lt;strong&gt;exactly the same&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2712/1*C-tT0FY8pdz7GdAy6meO2A.png&quot; alt=&quot;Any rich output that is visible in the notebook gets captured by Kale and exposed in the KFP dashboard.&quot; /&gt;&lt;em&gt;Any rich output that is visible in the notebook gets captured by Kale and exposed in the KFP dashboard.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;mlmd-integration&quot;&gt;MLMD Integration&lt;/h3&gt;

&lt;p&gt;An important part of running reproducible Machine Learning collaboratively and at scale, is being able to track pipeline executions, their inputs, their outputs and how these are connected together. Kubeflow provides an ML Metadata service which serves this exact purpose. This service also includes a lineage view to enable the user to have a deep insight into the whole history of events.&lt;/p&gt;

&lt;p&gt;Kale is now fully integrated with this service, logging each new execution automatically alongside all the artifacts produced by the pipeline.&lt;/p&gt;

&lt;h3 id=&quot;run-on-gpu&quot;&gt;Run on GPU&lt;/h3&gt;

&lt;p&gt;If you need to run a particular step on a GPU node, Kale has you covered too. You can now annotate steps with a dedicated dialog, directly from the notebook and each step can have its own annotations. This is just the first iteration, Kale will support adding any kind of K8s limits or annotations to pipeline steps in the near future.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/0*_gRl8SEBKs-WqKPX&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;overall-ui-and-performance-improvements&quot;&gt;Overall UI and performance improvements&lt;/h3&gt;

&lt;p&gt;The new version of Kale’s JupyterLab brings tons of performance improvements and UI enhancements. Updating the notebook cells’ annotations will now be easier and faster. We covered many corner cases and solved tons of bugs. The UI of the cell’s annotation editor is more consistent with the overall Jupyter style and much more intuitive and easy to use. A big shoutout to Tasos Alexiou (Arrikto) for having spent countless hours in understanding the Jupyter internals and improving our application lifecycle.&lt;/p&gt;

&lt;h2 id=&quot;hands-on&quot;&gt;Hands-On&lt;/h2&gt;

&lt;p&gt;To start playing-around with Kale v0.5, head over to the GitHub repository and follow the installation instructions. If you are already running Kubeflow (either in your own cluster or on MiniKF), spin up a new Notebook Server using the image gcr.io/arrikto/jupyter-kale:v0.5.0.&lt;/p&gt;

&lt;p&gt;Note: Kale v0.5 needs to run on Kubeflow ≥ 1.0. Also, make sure that the following Kubeflow components are updated as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Katib controller: gcr.io/arrikto/katib-controller:40b5b51a&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Katib Chocolate service: gcr.io/arrikto/suggestion-chocolate:40b5b51a&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will release a new version of MiniKF &lt;em&gt;very soon,&lt;/em&gt; containing a lot of improvements that will make the Kale experience even better. You will also be able to go through a new Codelab to try out the Kale-Katib integration yourself. Stay tuned for updates on the Arrikto channels.&lt;/p&gt;

&lt;h2 id=&quot;road-ahead&quot;&gt;Road Ahead&lt;/h2&gt;

&lt;p&gt;We are always looking to improve Kale and help data scientists have a seamless ML workflow from writing code to training, optimizing, and serving their models.&lt;/p&gt;

&lt;p&gt;We are excited to have the ML community try out this new version of Kale and the coming MiniKF update.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A special mention must go to the various members of the Arrikto team (Ilias Katsakioris, Chris Pavlou, Kostis Lolos, Tasos Alexiou) who contributed to delivering all these new features.&lt;/em&gt;&lt;/p&gt;</content><author><name>Stefano Fioravanzo</name></author><category term="integrations" /><summary type="html">Running pipelines at scale has never been easier.</summary></entry><entry><title type="html">Introduction to Kubeflow MPI Operator and Industry Adoption</title><link href="https://blog.kubeflow.org/integrations/operators/2020/03/16/mpi-operator.html" rel="alternate" type="text/html" title="Introduction to Kubeflow MPI Operator and Industry Adoption" /><published>2020-03-16T00:00:00-05:00</published><updated>2020-03-16T00:00:00-05:00</updated><id>https://blog.kubeflow.org/integrations/operators/2020/03/16/mpi-operator</id><content type="html" xml:base="https://blog.kubeflow.org/integrations/operators/2020/03/16/mpi-operator.html">&lt;p&gt;Kubeflow just &lt;a href=&quot;https://medium.com/kubeflow/kubeflow-1-0-cloud-native-ml-for-everyone-a3950202751&quot;&gt;announced its first major 1.0 release recently&lt;/a&gt;, which makes it easy for machine learning engineers and data scientists to leverage cloud assets (public or on-premise) for machine learning workloads. In this post, we’d like to introduce &lt;a href=&quot;https://github.com/kubeflow/mpi-operator&quot;&gt;MPI Operator&lt;/a&gt; (&lt;a href=&quot;https://www.kubeflow.org/docs/components/training/mpi/&quot;&gt;docs&lt;/a&gt;), one of the core components of Kubeflow, currently in alpha, which makes it easy to run synchronized, allreduce-style distributed training on Kubernetes.&lt;/p&gt;

&lt;p&gt;There are two major distributed training strategies nowadays: one based on parameter servers and the other based on collective communication primitives such as allreduce.&lt;/p&gt;

&lt;p&gt;Parameter server based distribution strategy relies on centralized parameter servers for coordination between workers, responsible for collecting gradients from workers and sending updated parameters to workers. The diagram below shows the interaction between parameter servers and worker nodes under this distributed training strategy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/3200/0*6oB0bnWO3FApfM0U&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While distributed training based on parameter servers can support training very large models and datasets by adding more workers and parameter servers, there are additional challenges involved in order to optimize the performance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It is not easy to identify the right ratio of the number of workers to the number of parameter servers. For example, if only a small number of parameter servers are used, network communication will likely become the bottleneck for training.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If many parameter servers are used, the communication may saturate network interconnects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The memory quota of workers and parameter servers requires fine tuning to avoid out-of-memory errors or memory waste.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the model could fit within the computational resources of each worker, additional maintenance and communication overheads are introduced when the model is partitioned to multiple parameter servers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We need to replicate the model on each parameter server in order to support fault-tolerance, which requires additional computational and storage resources.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In contrast, distributed training based on collective communication primitives such as &lt;a href=&quot;https://mpitutorial.com/tutorials/mpi-reduce-and-allreduce/&quot;&gt;allreduce&lt;/a&gt; could be more efficient and easier to use in certain use cases. Under allreduce-based distributed training strategy, each worker stores a complete set of model parameters. In other words, no parameter server is needed. Allreduce-based distributed training could address many of the challenges mentioned above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Each worker stores a complete set of model parameters, no parameter server is needed, so it’s straightforward to add more workers when necessary.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Failures among the workers can be recovered easily by restarting the failed workers and then load the current model from any of the existing workers. Model does not need to be replicated to support fault-tolerance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The model can be updated more efficiently by fully leveraging the network structure and collective communication algorithms. For example, in &lt;a href=&quot;http://research.baidu.com/bringing-hpc-techniques-deep-learning/&quot;&gt;ring-allreduce algorithm&lt;/a&gt;, each of the N workers only needs to communicate with two of its peer workers 2 * (N − 1) times to update all the model parameters completely.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scaling up and down the number of workers is as easy as reconstructing the underlying allreduce communicator and re-assigning the ranks among the workers.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many existing technologies available that provide implementations for these collective communication primitives such as &lt;a href=&quot;https://github.com/NVIDIA/nccl&quot;&gt;NCCL&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebookincubator/gloo/&quot;&gt;Gloo&lt;/a&gt;, and many different implementations of &lt;a href=&quot;https://www.mpi-forum.org/&quot;&gt;MPI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;MPI Operator provides a common &lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions&quot;&gt;Custom Resource Definition (CRD)&lt;/a&gt; for defining a training job on a single CPU/GPU, multiple CPU/GPUs, and multiple nodes. It also implements a custom controller to manage the CRD, create dependent resources, and reconcile the desired states.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/3200/0*bXT4CVqbfJEPIQxD&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unlike other operators in Kubeflow such as &lt;a href=&quot;https://github.com/kubeflow/tf-operator&quot;&gt;TF Operator&lt;/a&gt; and &lt;a href=&quot;https://github.com/kubeflow/pytorch-operator&quot;&gt;PyTorch Operator&lt;/a&gt; that only supports for one machine learning framework, MPI operator is decoupled from underlying framework so it can work well with many frameworks such as &lt;a href=&quot;https://github.com/horovod/horovod/&quot;&gt;Horovod&lt;/a&gt;, &lt;a href=&quot;https://www.tensorflow.org/&quot;&gt;TensorFlow&lt;/a&gt;, &lt;a href=&quot;https://pytorch.org/&quot;&gt;PyTorch&lt;/a&gt;, &lt;a href=&quot;https://mxnet.apache.org/&quot;&gt;Apache MXNet&lt;/a&gt;, and various collective communication implementations such as &lt;a href=&quot;https://www.open-mpi.org/&quot;&gt;OpenMPI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details on comparisons between different distributed training strategies, various Kubeflow operators, please check out &lt;a href=&quot;https://kccnceu19.sched.com/event/MPaT&quot;&gt;our presentation at KubeCon Europe 2019&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;example-api-spec&quot;&gt;Example API Spec&lt;/h2&gt;

&lt;p&gt;We’ve been working closely with the community and industry adopters to improve the API spec for MPI Operator so it’s suitable for many different use cases. Below is an example:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubeflow.org/v1alpha2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MPIJob&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tensorflow-benchmarks&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;slotsPerWorker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cleanPodPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Running&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mpiReplicaSpecs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Launcher&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mpioperator/tensorflow-benchmarks:latest&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tensorflow-benchmarks&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
             &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mpirun&lt;/span&gt;
             &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python&lt;/span&gt;
             &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py&lt;/span&gt;
             &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--model=resnet101&lt;/span&gt;
             &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--batch_size=64&lt;/span&gt;
             &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--variable_update=horovod&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mpioperator/tensorflow-benchmarks:latest&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tensorflow-benchmarks&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;nvidia.com/gpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that MPI Operator provides a flexible but user-friendly API that’s consistent across other Kubeflow operators.&lt;/p&gt;

&lt;p&gt;Users can easily customize their launcher and worker pod specs by modifying the relevant sections in the template. For example, customizing to use various types of computational resources such as CPUs, GPUs, memory, etc.&lt;/p&gt;

&lt;p&gt;In addition, below is an example spec that performs distributed TensorFlow training job using ImageNet data in &lt;a href=&quot;https://www.tensorflow.org/tutorials/load_data/tfrecord&quot;&gt;TFRecords&lt;/a&gt; format stored in a &lt;a href=&quot;https://kubernetes.io/docs/reference/glossary/?all=true#term-volume&quot;&gt;Kubernetes volume&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubeflow.org/v1alpha2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MPIJob&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tensorflow-benchmarks&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;slotsPerWorker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cleanPodPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Running&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mpiReplicaSpecs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Launcher&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mpioperator/tensorflow-benchmarks:latest&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tensorflow-benchmarks&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
             &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mpirun&lt;/span&gt;
             &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python&lt;/span&gt;
             &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py&lt;/span&gt;
             &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--model=resnet101&lt;/span&gt;
             &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--batch_size=64&lt;/span&gt;
             &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--variable_update=horovod&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mpioperator/tensorflow-benchmarks:latest&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tensorflow-benchmarks&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;nvidia.com/gpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;MPI Operator contains a custom controller that listens for changes in MPIJob resources. When a new MPIJob is created, the controller goes through the following &lt;em&gt;logical&lt;/em&gt; steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a &lt;a href=&quot;https://kubernetes.io/docs/reference/glossary/?all=true#term-configmap&quot;&gt;ConfigMap&lt;/a&gt; that contains:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A helper shell script that can be used by mpirun in place of ssh. It invokes kubectl exec for remote execution.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A hostfile that lists the pods in the worker &lt;a href=&quot;https://kubernetes.io/docs/reference/glossary/?all=true#term-statefulset&quot;&gt;StatefulSet&lt;/a&gt; (in the form of ${job-id}-worker-0, ${job-id}-worker-1, …), and the available slots (CPUs/GPUs) in each pod.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create the &lt;a href=&quot;https://kubernetes.io/docs/reference/glossary/?all=true#term-rbac&quot;&gt;RBAC&lt;/a&gt; resources (Role, ServiceAccount, RoleBinding) to allow remote execution (pods/exec).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Wait for the worker pods to be ready.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create the launcher job. It runs under the &lt;a href=&quot;https://kubernetes.io/docs/reference/glossary/?all=true#term-service-account&quot;&gt;ServiceAccount&lt;/a&gt; created in step 2, and sets up the necessary environment variables for executing mpirun commands remotely. The &lt;a href=&quot;https://kubernetes.io/docs/reference/kubectl/overview/&quot;&gt;kubectl&lt;/a&gt; binary is delivered to an emptyDir volume through an init container.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After the launcher job finishes, set the replicas to 0 in the worker StatefulSet.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/0*zUNFtd8-7u37Fos2&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For more details, please check out &lt;a href=&quot;https://github.com/kubeflow/community/blob/master/proposals/mpi-operator-proposal.md&quot;&gt;the design doc for MPI Operator&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;industry-adoption&quot;&gt;Industry Adoption&lt;/h2&gt;

&lt;p&gt;At the time of writing, there are &lt;a href=&quot;https://github.com/kubeflow/mpi-operator/blob/master/ADOPTERS.md&quot;&gt;13 disclosed industry adopters&lt;/a&gt; and many others who’ve been working closely with the community to reach where we are today. We’d like to showcase some of the use cases of MPI Operator in several companies. If your company would like to be included in the list of adopters, please send us a pull request &lt;a href=&quot;https://github.com/kubeflow/mpi-operator&quot;&gt;on GitHub&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;ant-group&quot;&gt;Ant Group&lt;/h2&gt;

&lt;p&gt;At &lt;a href=&quot;https://www.antgroup.com/&quot;&gt;Ant Group&lt;/a&gt;, &lt;a href=&quot;https://kubernetes.io/case-studies/ant-financial/&quot;&gt;we manage Kubernetes clusters with tens of thousands of nodes&lt;/a&gt; and have deployed the MPI Operator along with other Kubeflow operators. The MPI Operator leverages the network structure and collective communication algorithms so that users don’t have to worry about the right ratio between the number of workers and parameter servers to obtain the best performance. Users can focus on building out their model architectures without spending time on tuning the downstream infrastructure for distributed training.&lt;/p&gt;

&lt;p&gt;The models produced have been widely deployed in production and battle-tested in many different real life scenarios. One notable use case is &lt;a href=&quot;https://yq.aliyun.com/articles/563095&quot;&gt;Saofu&lt;/a&gt; — a mobile app for users to scan any “&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%A6%8F%E5%AD%97&quot;&gt;福&lt;/a&gt;” (Chinese character that represents fortune) through augmented reality to enter a lucky draw where each user would receive a virtual red envelope with a portion of a significant amount of money.&lt;/p&gt;

&lt;h2 id=&quot;bloomberg&quot;&gt;Bloomberg&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bloomberg.com/&quot;&gt;Bloomberg&lt;/a&gt;, the global business and financial information and news leader, possesses an enormous amount of data — from historical news to real-time market data and everything in between. Bloomberg’s Data Science Platform was built to allow the company’s internal machine learning engineers and data scientists to more easily leverage data and algorithmic models in their daily work, including when training jobs and automatic machine learning models used in the state-of-the-art solutions they’re building.&lt;/p&gt;

&lt;p&gt;“The Data Science Platform at Bloomberg offers a TensorFlowJob CRD similar to Kubeflow’s own TFJob, enabling the company’s data scientists to easily train neural network models. Recently, the Data Science Platform team enabled Horovod-based distributed training in its TensorFlowJob via the MPI Operator as an implementation detail. Using MPIJob in the back-end has allowed the Bloomberg Data Science Platform team to quickly offer its machine learning engineers a robust way to train a &lt;a href=&quot;https://arxiv.org/abs/1810.04805&quot;&gt;BERT model&lt;/a&gt; within hours using the company’s large corpus of text data’’, says Chengjian Zheng, software engineer from Bloomberg.&lt;/p&gt;

&lt;h2 id=&quot;caicloud&quot;&gt;Caicloud&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://intl.caicloud.io/products/clever&quot;&gt;Caicloud Clever&lt;/a&gt; is an artificial intelligence cloud platform based on Caicloud container cloud platform with powerful hardware resource management and efficient model development capabilities. Caicloud products have been deployed in many 500 China Fortune companies.&lt;/p&gt;

&lt;p&gt;“Caicloud Clever supports multiple frameworks of AI model training including TensorFlow, Apache MXNet, Caffe, PyTorch with the help of Kubeflow tf-operator, pytorch-operator and others”, says Ce Gao, AI infrastructure engineer from Caicloud Clever team. “While RingAllReduce distributed training support is requested for improved customer maturity.”&lt;/p&gt;

&lt;p&gt;Kubeflow MPI operator is a Kubernetes Operator for allreduce-style distributed training. Caicloud Clever team adopts MPI Operator’s v1alpha2 API. The Kubernetes native API makes it easy to work with the existing systems in the platform.&lt;/p&gt;

&lt;h2 id=&quot;iguazio&quot;&gt;Iguazio&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.iguazio.com/&quot;&gt;Iguazio&lt;/a&gt; provides a cloud-native data science platform with emphasis on automation, performance, scalability, and use of open-source tools.&lt;/p&gt;

&lt;p&gt;According to Yaron Haviv, the Founder and CTO of Iguazio, “We evaluated various mechanisms which will allow us to scale deep learning frameworks with minimal developer effort and found that using the combination of Horovod with the MPI Operator over Kubernetes is the best tool for the job since it enable horizontal scalability, supports multiple frameworks such as TensorFlow and PyTorch and doesn’t require too much extra coding or the complex use of parameter servers.”&lt;/p&gt;

&lt;p&gt;Iguazio have integrated the MPI Operator into its managed service offering and its fast data layer for maximum scalability, and work to simplify the usage through open source projects like &lt;a href=&quot;https://github.com/mlrun/mlrun&quot;&gt;MLRun&lt;/a&gt; (for ML automation and tracking). Check out &lt;a href=&quot;https://towardsdatascience.com/gpu-as-a-service-on-kubeflow-fast-scalable-and-efficient-ml-c5783b95d192&quot;&gt;this blog post&lt;/a&gt; with an example application that demonstrates Iguazio’s usage of the MPI Operator.&lt;/p&gt;

&lt;h2 id=&quot;polyaxon&quot;&gt;Polyaxon&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://polyaxon.com/&quot;&gt;Polyaxon&lt;/a&gt; is a platform for reproducible and scalable machine learning on Kubernetes, it allows users to iterate faster on their research and model creation. Polyaxon provides a simple abstraction for data scientists and machine learning engineers to streamline their experimentation workflow, and provides a very cohesive abstraction for training and tracking models using popular frameworks such as Scikit-learn, TensorFlow, PyTorch, Apache MXNet, Caffe, etc.&lt;/p&gt;

&lt;p&gt;“Several Polyaxon users and customers were requesting an easy way to perform an allreduce-style distributed training, the MPI Operator was the perfect solution to provide such abstraction. Polyaxon is deployed at several companies and research institutions, and the public docker hub has over 9 million downloads.”, says Mourad Mourafiq, the Co-founder of Polyxagon.&lt;/p&gt;

&lt;h2 id=&quot;community-and-call-for-contributions&quot;&gt;Community and Call for Contributions&lt;/h2&gt;

&lt;p&gt;We are grateful for &lt;a href=&quot;https://github.com/kubeflow/mpi-operator/graphs/contributors&quot;&gt;over 28 individual contributors from over 11 organizations&lt;/a&gt;, namely Alibaba Cloud, Amazon Web Services, Ant Group, Bloomberg, Caicloud, Google Cloud, Huawei, Iguazio, NVIDIA, Polyaxon, and Tencent, that have contributed directly to MPI Operator’s codebase and many others who’ve filed issues or helped resolve them, asked and answered questions, and were part of inspiring discussions. We’ve put together a &lt;a href=&quot;https://github.com/kubeflow/mpi-operator/blob/master/ROADMAP.md&quot;&gt;roadmap&lt;/a&gt; that provides a high-level overview of where the MPI Operator will grow in future releases and we welcome any contributions from the community!&lt;/p&gt;

&lt;p&gt;We could not have achieved our milestones without an incredibly active community. Check out our &lt;a href=&quot;https://www.kubeflow.org/docs/about/community/&quot;&gt;community page&lt;/a&gt; to learn more about how to join the Kubeflow community!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href=&quot;https://terrytangyuan.github.io/2020/03/17/introduction-to-kubeflow-mpi-operator-and-industry-adoption/&quot;&gt;https://terrytangyuan.github.io&lt;/a&gt; on March 17, 2020.&lt;/em&gt;&lt;/p&gt;</content><author><name>&lt;a href='https://twitter.com/TerryTangYuan'&gt;Yuan Tang&lt;/a&gt; (Ant Group), &lt;a href='https://www.linkedin.com/in/wei-yan-a6037337'&gt;Wei Yan&lt;/a&gt; (Ant Group), and &lt;a href='https://www.linkedin.com/in/rongou'&gt;Rong Ou&lt;/a&gt; (NVIDIA)</name></author><category term="integrations" /><category term="operators" /><summary type="html">Kubeflow just announced its first major 1.0 release recently, which makes it easy for machine learning engineers and data scientists to leverage cloud assets (public or on-premise) for machine learning workloads. In this post, we’d like to introduce MPI Operator (docs), one of the core components of Kubeflow, currently in alpha, which makes it easy to run synchronized, allreduce-style distributed training on Kubernetes.</summary></entry></feed>